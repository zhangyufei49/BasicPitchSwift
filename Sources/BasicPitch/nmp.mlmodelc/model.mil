program(1.0)
[buildInfo = dict<tensor<string, []>, tensor<string, []>>({{"coremlc-component-MIL", "3402.3.2"}, {"coremlc-version", "3402.4.1"}, {"coremltools-component-tensorflow", "2.12.0"}, {"coremltools-version", "7.0"}})]
{
    func main<ios15>(tensor<fp32, [1, 43844, 1]> input_2) {
            tensor<int32, []> StatefulPartitionedCall_model_1_cq_t2010v2_1_concat_7_axis = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_concat_7_axis"), val = tensor<int32, []>(1)];
            tensor<fp32, []> StatefulPartitionedCall_model_1_cq_t2010v2_1_Pow_y = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_Pow_y"), val = tensor<fp32, []>(0x1p+1)];
            tensor<int32, [3]> StatefulPartitionedCall_model_1_cq_t2010v2_1_transpose_70_perm = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_transpose_70_perm"), val = tensor<int32, [3]>([0, 2, 1])];
            tensor<fp32, []> StatefulPartitionedCall_model_1_normalized_log_1_add_y = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_normalized_log_1_add_y"), val = tensor<fp32, []>(0x1.b7cdfep-34)];
            tensor<int32, []> StatefulPartitionedCall_model_1_harmonic_stacking_concat_axis = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_harmonic_stacking_concat_axis"), val = tensor<int32, []>(-1)];
            tensor<fp32, [309, 1, 1]> StatefulPartitionedCall_model_1_cq_t2010v2_1_Sqrt = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_Sqrt"), val = tensor<fp32, [309, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(64)))];
            tensor<fp32, []> StatefulPartitionedCall_model_1_normalized_log_1_truediv = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_normalized_log_1_truediv"), val = tensor<fp32, []>(0x1.15f2cep+2)];
            tensor<fp32, [1]> StatefulPartitionedCall_model_1_batch_normalization_ReadVariableOp = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_batch_normalization_ReadVariableOp"), val = tensor<fp32, [1]>([0x1.f3f4ccp-2])];
            tensor<fp32, [1]> StatefulPartitionedCall_model_1_batch_normalization_ReadVariableOp_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_batch_normalization_ReadVariableOp_1"), val = tensor<fp32, [1]>([0x1.7990b2p-2])];
            tensor<fp32, [1]> StatefulPartitionedCall_model_1_batch_normalization_FusedBatchNormV3_ReadVariableOp = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_batch_normalization_FusedBatchNormV3_ReadVariableOp"), val = tensor<fp32, [1]>([0x1.01161ep-1])];
            tensor<fp32, [1]> StatefulPartitionedCall_model_1_batch_normalization_FusedBatchNormV3_ReadVariableOp_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_batch_normalization_FusedBatchNormV3_ReadVariableOp_1"), val = tensor<fp32, [1]>([0x1.351f98p-5])];
            tensor<int32, [2]> StatefulPartitionedCall_model_1_flatten_audio_ch_1_reshape_Reshape_shape = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_flatten_audio_ch_1_reshape_Reshape_shape"), val = tensor<int32, [2]>([1, 43844])];
            tensor<fp32, [1, 43844]> StatefulPartitionedCall_model_1_flatten_audio_ch_1_reshape_Reshape = reshape(shape = StatefulPartitionedCall_model_1_flatten_audio_ch_1_reshape_Reshape_shape, x = input_2)[name = tensor<string, []>("StatefulPartitionedCall_model_1_flatten_audio_ch_1_reshape_Reshape")];
            tensor<int32, [1]> StatefulPartitionedCall_model_1_cq_t2010v2_1_strided_slice_new_axes_axes_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_strided_slice_new_axes_axes_0"), val = tensor<int32, [1]>([1])];
            tensor<fp32, [1, 1, 43844]> StatefulPartitionedCall_model_1_cq_t2010v2_1_strided_slice_new_axes = expand_dims(axes = StatefulPartitionedCall_model_1_cq_t2010v2_1_strided_slice_new_axes_axes_0, x = StatefulPartitionedCall_model_1_flatten_audio_ch_1_reshape_Reshape)[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_strided_slice_new_axes")];
            tensor<fp32, []> const_0 = const()[name = tensor<string, []>("const_0"), val = tensor<fp32, []>(0x0p+0)];
            tensor<int32, [6]> pad_0_pad_0 = const()[name = tensor<string, []>("pad_0_pad_0"), val = tensor<int32, [6]>([0, 0, 0, 0, 127, 127])];
            tensor<string, []> pad_0_mode_0 = const()[name = tensor<string, []>("pad_0_mode_0"), val = tensor<string, []>("constant")];
            tensor<fp32, [1, 1, 44098]> pad_0 = pad(constant_val = const_0, mode = pad_0_mode_0, pad = pad_0_pad_0, x = StatefulPartitionedCall_model_1_cq_t2010v2_1_strided_slice_new_axes)[name = tensor<string, []>("pad_0")];
            tensor<fp32, []> StatefulPartitionedCall_model_1_cq_t2010v2_1_reflection_pad1d_MirrorPad_pad_constant_val_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_reflection_pad1d_MirrorPad_pad_constant_val_0"), val = tensor<fp32, []>(0x0p+0)];
            tensor<string, []> StatefulPartitionedCall_model_1_cq_t2010v2_1_reflection_pad1d_MirrorPad_pad_mode_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_reflection_pad1d_MirrorPad_pad_mode_0"), val = tensor<string, []>("reflect")];
            tensor<int32, [4]> const_31 = const()[name = tensor<string, []>("const_31"), val = tensor<int32, [4]>([0, 0, 128, 128])];
            tensor<fp32, [1, 1, 44100]> StatefulPartitionedCall_model_1_cq_t2010v2_1_reflection_pad1d_MirrorPad_pad = pad(constant_val = StatefulPartitionedCall_model_1_cq_t2010v2_1_reflection_pad1d_MirrorPad_pad_constant_val_0, mode = StatefulPartitionedCall_model_1_cq_t2010v2_1_reflection_pad1d_MirrorPad_pad_mode_0, pad = const_31, x = StatefulPartitionedCall_model_1_cq_t2010v2_1_strided_slice_new_axes)[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_reflection_pad1d_MirrorPad_pad")];
            tensor<fp32, [1, 1, 256]> squeeze_0 = const()[name = tensor<string, []>("squeeze_0"), val = tensor<fp32, [1, 1, 256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1408)))];
            tensor<string, []> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_2x_pad_type_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_2x_pad_type_1"), val = tensor<string, []>("valid")];
            tensor<int32, []> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_2x_groups_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_2x_groups_1"), val = tensor<int32, []>(1)];
            tensor<int32, [1]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_2x_strides_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_2x_strides_1"), val = tensor<int32, [1]>([2])];
            tensor<int32, [2]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_2x_pad_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_2x_pad_1"), val = tensor<int32, [2]>([0, 0])];
            tensor<int32, [1]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_2x_dilations_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_2x_dilations_1"), val = tensor<int32, [1]>([1])];
            tensor<fp32, [1, 1, 21922]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_2x = conv(dilations = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_2x_dilations_1, groups = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_2x_groups_1, pad = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_2x_pad_1, pad_type = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_2x_pad_type_1, strides = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_2x_strides_1, weight = squeeze_0, x = pad_0)[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_2x")];
            tensor<fp32, [36, 1, 256]> squeeze_1 = const()[name = tensor<string, []>("squeeze_1"), val = tensor<fp32, [36, 1, 256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2496)))];
            tensor<string, []> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1dx_pad_type_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1dx_pad_type_1"), val = tensor<string, []>("valid")];
            tensor<int32, []> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1dx_groups_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1dx_groups_1"), val = tensor<int32, []>(1)];
            tensor<int32, [1]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1dx_strides_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1dx_strides_1"), val = tensor<int32, [1]>([256])];
            tensor<int32, [2]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1dx_pad_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1dx_pad_1"), val = tensor<int32, [2]>([0, 0])];
            tensor<int32, [1]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1dx_dilations_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1dx_dilations_1"), val = tensor<int32, [1]>([1])];
            tensor<fp32, [1, 36, 172]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1dx = conv(dilations = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1dx_dilations_1, groups = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1dx_groups_1, pad = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1dx_pad_1, pad_type = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1dx_pad_type_1, strides = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1dx_strides_1, weight = squeeze_1, x = StatefulPartitionedCall_model_1_cq_t2010v2_1_reflection_pad1d_MirrorPad_pad)[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1dx")];
            tensor<string, []> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_1x_pad_type_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_1x_pad_type_1"), val = tensor<string, []>("valid")];
            tensor<int32, []> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_1x_groups_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_1x_groups_1"), val = tensor<int32, []>(1)];
            tensor<int32, [1]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_1x_strides_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_1x_strides_1"), val = tensor<int32, [1]>([256])];
            tensor<int32, [2]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_1x_pad_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_1x_pad_1"), val = tensor<int32, [2]>([0, 0])];
            tensor<int32, [1]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_1x_dilations_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_1x_dilations_1"), val = tensor<int32, [1]>([1])];
            tensor<fp32, [36, 1, 256]> StatefulPartitionedCall_model_1_cq_t2010v2_1_Neg_weight_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_Neg_weight_0"), val = tensor<fp32, [36, 1, 256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(39424)))];
            tensor<fp32, [36]> StatefulPartitionedCall_model_1_cq_t2010v2_1_Neg_bias_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_Neg_bias_0"), val = tensor<fp32, [36]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(76352)))];
            tensor<fp32, [1, 36, 172]> StatefulPartitionedCall_model_1_cq_t2010v2_1_Neg = conv(bias = StatefulPartitionedCall_model_1_cq_t2010v2_1_Neg_bias_0, dilations = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_1x_dilations_1, groups = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_1x_groups_1, pad = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_1x_pad_1, pad_type = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_1x_pad_type_1, strides = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_1x_strides_1, weight = StatefulPartitionedCall_model_1_cq_t2010v2_1_Neg_weight_0, x = StatefulPartitionedCall_model_1_cq_t2010v2_1_reflection_pad1d_MirrorPad_pad)[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_Neg")];
            tensor<fp32, []> const_1 = const()[name = tensor<string, []>("const_1"), val = tensor<fp32, []>(0x0p+0)];
            tensor<int32, [6]> pad_1_pad_0 = const()[name = tensor<string, []>("pad_1_pad_0"), val = tensor<int32, [6]>([0, 0, 0, 0, 127, 127])];
            tensor<string, []> pad_1_mode_0 = const()[name = tensor<string, []>("pad_1_mode_0"), val = tensor<string, []>("constant")];
            tensor<fp32, [1, 1, 22176]> pad_1 = pad(constant_val = const_1, mode = pad_1_mode_0, pad = pad_1_pad_0, x = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_2x)[name = tensor<string, []>("pad_1")];
            tensor<fp32, []> StatefulPartitionedCall_model_1_cq_t2010v2_1_reflection_pad1d_MirrorPad_1_pad_constant_val_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_reflection_pad1d_MirrorPad_1_pad_constant_val_0"), val = tensor<fp32, []>(0x0p+0)];
            tensor<string, []> StatefulPartitionedCall_model_1_cq_t2010v2_1_reflection_pad1d_MirrorPad_1_pad_mode_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_reflection_pad1d_MirrorPad_1_pad_mode_0"), val = tensor<string, []>("reflect")];
            tensor<int32, [4]> const_32 = const()[name = tensor<string, []>("const_32"), val = tensor<int32, [4]>([0, 0, 128, 128])];
            tensor<fp32, [1, 1, 22178]> StatefulPartitionedCall_model_1_cq_t2010v2_1_reflection_pad1d_MirrorPad_1_pad = pad(constant_val = StatefulPartitionedCall_model_1_cq_t2010v2_1_reflection_pad1d_MirrorPad_1_pad_constant_val_0, mode = StatefulPartitionedCall_model_1_cq_t2010v2_1_reflection_pad1d_MirrorPad_1_pad_mode_0, pad = const_32, x = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_2x)[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_reflection_pad1d_MirrorPad_1_pad")];
            tensor<int32, []> StatefulPartitionedCall_model_1_cq_t2010v2_1_stack_axis_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_stack_axis_0"), val = tensor<int32, []>(3)];
            tensor<fp32, [1, 36, 172, 2]> StatefulPartitionedCall_model_1_cq_t2010v2_1_stack = stack(axis = StatefulPartitionedCall_model_1_cq_t2010v2_1_stack_axis_0, values = (StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1dx, StatefulPartitionedCall_model_1_cq_t2010v2_1_Neg))[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_stack")];
            tensor<string, []> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_5x_pad_type_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_5x_pad_type_1"), val = tensor<string, []>("valid")];
            tensor<int32, []> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_5x_groups_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_5x_groups_1"), val = tensor<int32, []>(1)];
            tensor<int32, [1]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_5x_strides_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_5x_strides_1"), val = tensor<int32, [1]>([2])];
            tensor<int32, [2]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_5x_pad_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_5x_pad_1"), val = tensor<int32, [2]>([0, 0])];
            tensor<int32, [1]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_5x_dilations_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_5x_dilations_1"), val = tensor<int32, [1]>([1])];
            tensor<fp32, [1, 1, 10961]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_5x = conv(dilations = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_5x_dilations_1, groups = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_5x_groups_1, pad = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_5x_pad_1, pad_type = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_5x_pad_type_1, strides = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_5x_strides_1, weight = squeeze_0, x = pad_1)[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_5x")];
            tensor<string, []> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_3x_pad_type_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_3x_pad_type_1"), val = tensor<string, []>("valid")];
            tensor<int32, []> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_3x_groups_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_3x_groups_1"), val = tensor<int32, []>(1)];
            tensor<int32, [1]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_3x_strides_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_3x_strides_1"), val = tensor<int32, [1]>([128])];
            tensor<int32, [2]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_3x_pad_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_3x_pad_1"), val = tensor<int32, [2]>([0, 0])];
            tensor<int32, [1]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_3x_dilations_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_3x_dilations_1"), val = tensor<int32, [1]>([1])];
            tensor<fp32, [1, 36, 172]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_3x = conv(dilations = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_3x_dilations_1, groups = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_3x_groups_1, pad = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_3x_pad_1, pad_type = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_3x_pad_type_1, strides = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_3x_strides_1, weight = squeeze_1, x = StatefulPartitionedCall_model_1_cq_t2010v2_1_reflection_pad1d_MirrorPad_1_pad)[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_3x")];
            tensor<string, []> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_4x_pad_type_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_4x_pad_type_1"), val = tensor<string, []>("valid")];
            tensor<int32, []> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_4x_groups_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_4x_groups_1"), val = tensor<int32, []>(1)];
            tensor<int32, [1]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_4x_strides_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_4x_strides_1"), val = tensor<int32, [1]>([128])];
            tensor<int32, [2]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_4x_pad_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_4x_pad_1"), val = tensor<int32, [2]>([0, 0])];
            tensor<int32, [1]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_4x_dilations_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_4x_dilations_1"), val = tensor<int32, [1]>([1])];
            tensor<fp32, [36]> StatefulPartitionedCall_model_1_cq_t2010v2_1_Neg_1_bias_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_Neg_1_bias_0"), val = tensor<fp32, [36]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(76608)))];
            tensor<fp32, [1, 36, 172]> StatefulPartitionedCall_model_1_cq_t2010v2_1_Neg_1 = conv(bias = StatefulPartitionedCall_model_1_cq_t2010v2_1_Neg_1_bias_0, dilations = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_4x_dilations_1, groups = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_4x_groups_1, pad = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_4x_pad_1, pad_type = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_4x_pad_type_1, strides = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_4x_strides_1, weight = StatefulPartitionedCall_model_1_cq_t2010v2_1_Neg_weight_0, x = StatefulPartitionedCall_model_1_cq_t2010v2_1_reflection_pad1d_MirrorPad_1_pad)[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_Neg_1")];
            tensor<fp32, []> const_3 = const()[name = tensor<string, []>("const_3"), val = tensor<fp32, []>(0x0p+0)];
            tensor<int32, [6]> pad_2_pad_0 = const()[name = tensor<string, []>("pad_2_pad_0"), val = tensor<int32, [6]>([0, 0, 0, 0, 127, 127])];
            tensor<string, []> pad_2_mode_0 = const()[name = tensor<string, []>("pad_2_mode_0"), val = tensor<string, []>("constant")];
            tensor<fp32, [1, 1, 11215]> pad_2 = pad(constant_val = const_3, mode = pad_2_mode_0, pad = pad_2_pad_0, x = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_5x)[name = tensor<string, []>("pad_2")];
            tensor<fp32, []> StatefulPartitionedCall_model_1_cq_t2010v2_1_reflection_pad1d_MirrorPad_2_pad_constant_val_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_reflection_pad1d_MirrorPad_2_pad_constant_val_0"), val = tensor<fp32, []>(0x0p+0)];
            tensor<string, []> StatefulPartitionedCall_model_1_cq_t2010v2_1_reflection_pad1d_MirrorPad_2_pad_mode_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_reflection_pad1d_MirrorPad_2_pad_mode_0"), val = tensor<string, []>("reflect")];
            tensor<int32, [4]> const_33 = const()[name = tensor<string, []>("const_33"), val = tensor<int32, [4]>([0, 0, 128, 128])];
            tensor<fp32, [1, 1, 11217]> StatefulPartitionedCall_model_1_cq_t2010v2_1_reflection_pad1d_MirrorPad_2_pad = pad(constant_val = StatefulPartitionedCall_model_1_cq_t2010v2_1_reflection_pad1d_MirrorPad_2_pad_constant_val_0, mode = StatefulPartitionedCall_model_1_cq_t2010v2_1_reflection_pad1d_MirrorPad_2_pad_mode_0, pad = const_33, x = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_5x)[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_reflection_pad1d_MirrorPad_2_pad")];
            tensor<int32, []> StatefulPartitionedCall_model_1_cq_t2010v2_1_stack_1_axis_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_stack_1_axis_0"), val = tensor<int32, []>(3)];
            tensor<fp32, [1, 36, 172, 2]> StatefulPartitionedCall_model_1_cq_t2010v2_1_stack_1 = stack(axis = StatefulPartitionedCall_model_1_cq_t2010v2_1_stack_1_axis_0, values = (StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_3x, StatefulPartitionedCall_model_1_cq_t2010v2_1_Neg_1))[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_stack_1")];
            tensor<string, []> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_8x_pad_type_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_8x_pad_type_1"), val = tensor<string, []>("valid")];
            tensor<int32, []> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_8x_groups_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_8x_groups_1"), val = tensor<int32, []>(1)];
            tensor<int32, [1]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_8x_strides_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_8x_strides_1"), val = tensor<int32, [1]>([2])];
            tensor<int32, [2]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_8x_pad_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_8x_pad_1"), val = tensor<int32, [2]>([0, 0])];
            tensor<int32, [1]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_8x_dilations_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_8x_dilations_1"), val = tensor<int32, [1]>([1])];
            tensor<fp32, [1, 1, 5480]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_8x = conv(dilations = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_8x_dilations_1, groups = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_8x_groups_1, pad = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_8x_pad_1, pad_type = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_8x_pad_type_1, strides = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_8x_strides_1, weight = squeeze_0, x = pad_2)[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_8x")];
            tensor<string, []> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_6x_pad_type_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_6x_pad_type_1"), val = tensor<string, []>("valid")];
            tensor<int32, []> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_6x_groups_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_6x_groups_1"), val = tensor<int32, []>(1)];
            tensor<int32, [1]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_6x_strides_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_6x_strides_1"), val = tensor<int32, [1]>([64])];
            tensor<int32, [2]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_6x_pad_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_6x_pad_1"), val = tensor<int32, [2]>([0, 0])];
            tensor<int32, [1]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_6x_dilations_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_6x_dilations_1"), val = tensor<int32, [1]>([1])];
            tensor<fp32, [1, 36, 172]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_6x = conv(dilations = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_6x_dilations_1, groups = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_6x_groups_1, pad = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_6x_pad_1, pad_type = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_6x_pad_type_1, strides = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_6x_strides_1, weight = squeeze_1, x = StatefulPartitionedCall_model_1_cq_t2010v2_1_reflection_pad1d_MirrorPad_2_pad)[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_6x")];
            tensor<string, []> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_7x_pad_type_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_7x_pad_type_1"), val = tensor<string, []>("valid")];
            tensor<int32, []> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_7x_groups_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_7x_groups_1"), val = tensor<int32, []>(1)];
            tensor<int32, [1]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_7x_strides_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_7x_strides_1"), val = tensor<int32, [1]>([64])];
            tensor<int32, [2]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_7x_pad_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_7x_pad_1"), val = tensor<int32, [2]>([0, 0])];
            tensor<int32, [1]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_7x_dilations_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_7x_dilations_1"), val = tensor<int32, [1]>([1])];
            tensor<fp32, [36]> StatefulPartitionedCall_model_1_cq_t2010v2_1_Neg_2_bias_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_Neg_2_bias_0"), val = tensor<fp32, [36]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(76864)))];
            tensor<fp32, [1, 36, 172]> StatefulPartitionedCall_model_1_cq_t2010v2_1_Neg_2 = conv(bias = StatefulPartitionedCall_model_1_cq_t2010v2_1_Neg_2_bias_0, dilations = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_7x_dilations_1, groups = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_7x_groups_1, pad = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_7x_pad_1, pad_type = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_7x_pad_type_1, strides = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_7x_strides_1, weight = StatefulPartitionedCall_model_1_cq_t2010v2_1_Neg_weight_0, x = StatefulPartitionedCall_model_1_cq_t2010v2_1_reflection_pad1d_MirrorPad_2_pad)[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_Neg_2")];
            tensor<fp32, []> const_5 = const()[name = tensor<string, []>("const_5"), val = tensor<fp32, []>(0x0p+0)];
            tensor<int32, [6]> pad_3_pad_0 = const()[name = tensor<string, []>("pad_3_pad_0"), val = tensor<int32, [6]>([0, 0, 0, 0, 127, 127])];
            tensor<string, []> pad_3_mode_0 = const()[name = tensor<string, []>("pad_3_mode_0"), val = tensor<string, []>("constant")];
            tensor<fp32, [1, 1, 5734]> pad_3 = pad(constant_val = const_5, mode = pad_3_mode_0, pad = pad_3_pad_0, x = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_8x)[name = tensor<string, []>("pad_3")];
            tensor<fp32, []> StatefulPartitionedCall_model_1_cq_t2010v2_1_reflection_pad1d_MirrorPad_3_pad_constant_val_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_reflection_pad1d_MirrorPad_3_pad_constant_val_0"), val = tensor<fp32, []>(0x0p+0)];
            tensor<string, []> StatefulPartitionedCall_model_1_cq_t2010v2_1_reflection_pad1d_MirrorPad_3_pad_mode_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_reflection_pad1d_MirrorPad_3_pad_mode_0"), val = tensor<string, []>("reflect")];
            tensor<int32, [4]> const_34 = const()[name = tensor<string, []>("const_34"), val = tensor<int32, [4]>([0, 0, 128, 128])];
            tensor<fp32, [1, 1, 5736]> StatefulPartitionedCall_model_1_cq_t2010v2_1_reflection_pad1d_MirrorPad_3_pad = pad(constant_val = StatefulPartitionedCall_model_1_cq_t2010v2_1_reflection_pad1d_MirrorPad_3_pad_constant_val_0, mode = StatefulPartitionedCall_model_1_cq_t2010v2_1_reflection_pad1d_MirrorPad_3_pad_mode_0, pad = const_34, x = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_8x)[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_reflection_pad1d_MirrorPad_3_pad")];
            tensor<int32, []> StatefulPartitionedCall_model_1_cq_t2010v2_1_stack_2_axis_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_stack_2_axis_0"), val = tensor<int32, []>(3)];
            tensor<fp32, [1, 36, 172, 2]> StatefulPartitionedCall_model_1_cq_t2010v2_1_stack_2 = stack(axis = StatefulPartitionedCall_model_1_cq_t2010v2_1_stack_2_axis_0, values = (StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_6x, StatefulPartitionedCall_model_1_cq_t2010v2_1_Neg_2))[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_stack_2")];
            tensor<string, []> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_11x_pad_type_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_11x_pad_type_1"), val = tensor<string, []>("valid")];
            tensor<int32, []> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_11x_groups_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_11x_groups_1"), val = tensor<int32, []>(1)];
            tensor<int32, [1]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_11x_strides_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_11x_strides_1"), val = tensor<int32, [1]>([2])];
            tensor<int32, [2]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_11x_pad_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_11x_pad_1"), val = tensor<int32, [2]>([0, 0])];
            tensor<int32, [1]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_11x_dilations_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_11x_dilations_1"), val = tensor<int32, [1]>([1])];
            tensor<fp32, [1, 1, 2740]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_11x = conv(dilations = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_11x_dilations_1, groups = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_11x_groups_1, pad = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_11x_pad_1, pad_type = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_11x_pad_type_1, strides = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_11x_strides_1, weight = squeeze_0, x = pad_3)[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_11x")];
            tensor<string, []> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_9x_pad_type_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_9x_pad_type_1"), val = tensor<string, []>("valid")];
            tensor<int32, []> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_9x_groups_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_9x_groups_1"), val = tensor<int32, []>(1)];
            tensor<int32, [1]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_9x_strides_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_9x_strides_1"), val = tensor<int32, [1]>([32])];
            tensor<int32, [2]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_9x_pad_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_9x_pad_1"), val = tensor<int32, [2]>([0, 0])];
            tensor<int32, [1]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_9x_dilations_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_9x_dilations_1"), val = tensor<int32, [1]>([1])];
            tensor<fp32, [1, 36, 172]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_9x = conv(dilations = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_9x_dilations_1, groups = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_9x_groups_1, pad = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_9x_pad_1, pad_type = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_9x_pad_type_1, strides = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_9x_strides_1, weight = squeeze_1, x = StatefulPartitionedCall_model_1_cq_t2010v2_1_reflection_pad1d_MirrorPad_3_pad)[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_9x")];
            tensor<string, []> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_10x_pad_type_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_10x_pad_type_1"), val = tensor<string, []>("valid")];
            tensor<int32, []> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_10x_groups_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_10x_groups_1"), val = tensor<int32, []>(1)];
            tensor<int32, [1]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_10x_strides_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_10x_strides_1"), val = tensor<int32, [1]>([32])];
            tensor<int32, [2]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_10x_pad_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_10x_pad_1"), val = tensor<int32, [2]>([0, 0])];
            tensor<int32, [1]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_10x_dilations_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_10x_dilations_1"), val = tensor<int32, [1]>([1])];
            tensor<fp32, [36]> StatefulPartitionedCall_model_1_cq_t2010v2_1_Neg_3_bias_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_Neg_3_bias_0"), val = tensor<fp32, [36]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(77120)))];
            tensor<fp32, [1, 36, 172]> StatefulPartitionedCall_model_1_cq_t2010v2_1_Neg_3 = conv(bias = StatefulPartitionedCall_model_1_cq_t2010v2_1_Neg_3_bias_0, dilations = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_10x_dilations_1, groups = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_10x_groups_1, pad = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_10x_pad_1, pad_type = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_10x_pad_type_1, strides = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_10x_strides_1, weight = StatefulPartitionedCall_model_1_cq_t2010v2_1_Neg_weight_0, x = StatefulPartitionedCall_model_1_cq_t2010v2_1_reflection_pad1d_MirrorPad_3_pad)[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_Neg_3")];
            tensor<fp32, []> const_7 = const()[name = tensor<string, []>("const_7"), val = tensor<fp32, []>(0x0p+0)];
            tensor<int32, [6]> pad_4_pad_0 = const()[name = tensor<string, []>("pad_4_pad_0"), val = tensor<int32, [6]>([0, 0, 0, 0, 127, 127])];
            tensor<string, []> pad_4_mode_0 = const()[name = tensor<string, []>("pad_4_mode_0"), val = tensor<string, []>("constant")];
            tensor<fp32, [1, 1, 2994]> pad_4 = pad(constant_val = const_7, mode = pad_4_mode_0, pad = pad_4_pad_0, x = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_11x)[name = tensor<string, []>("pad_4")];
            tensor<fp32, []> StatefulPartitionedCall_model_1_cq_t2010v2_1_reflection_pad1d_MirrorPad_4_pad_constant_val_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_reflection_pad1d_MirrorPad_4_pad_constant_val_0"), val = tensor<fp32, []>(0x0p+0)];
            tensor<string, []> StatefulPartitionedCall_model_1_cq_t2010v2_1_reflection_pad1d_MirrorPad_4_pad_mode_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_reflection_pad1d_MirrorPad_4_pad_mode_0"), val = tensor<string, []>("reflect")];
            tensor<int32, [4]> const_35 = const()[name = tensor<string, []>("const_35"), val = tensor<int32, [4]>([0, 0, 128, 128])];
            tensor<fp32, [1, 1, 2996]> StatefulPartitionedCall_model_1_cq_t2010v2_1_reflection_pad1d_MirrorPad_4_pad = pad(constant_val = StatefulPartitionedCall_model_1_cq_t2010v2_1_reflection_pad1d_MirrorPad_4_pad_constant_val_0, mode = StatefulPartitionedCall_model_1_cq_t2010v2_1_reflection_pad1d_MirrorPad_4_pad_mode_0, pad = const_35, x = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_11x)[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_reflection_pad1d_MirrorPad_4_pad")];
            tensor<int32, []> StatefulPartitionedCall_model_1_cq_t2010v2_1_stack_3_axis_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_stack_3_axis_0"), val = tensor<int32, []>(3)];
            tensor<fp32, [1, 36, 172, 2]> StatefulPartitionedCall_model_1_cq_t2010v2_1_stack_3 = stack(axis = StatefulPartitionedCall_model_1_cq_t2010v2_1_stack_3_axis_0, values = (StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_9x, StatefulPartitionedCall_model_1_cq_t2010v2_1_Neg_3))[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_stack_3")];
            tensor<string, []> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_14x_pad_type_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_14x_pad_type_1"), val = tensor<string, []>("valid")];
            tensor<int32, []> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_14x_groups_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_14x_groups_1"), val = tensor<int32, []>(1)];
            tensor<int32, [1]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_14x_strides_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_14x_strides_1"), val = tensor<int32, [1]>([2])];
            tensor<int32, [2]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_14x_pad_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_14x_pad_1"), val = tensor<int32, [2]>([0, 0])];
            tensor<int32, [1]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_14x_dilations_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_14x_dilations_1"), val = tensor<int32, [1]>([1])];
            tensor<fp32, [1, 1, 1370]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_14x = conv(dilations = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_14x_dilations_1, groups = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_14x_groups_1, pad = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_14x_pad_1, pad_type = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_14x_pad_type_1, strides = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_14x_strides_1, weight = squeeze_0, x = pad_4)[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_14x")];
            tensor<string, []> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_12x_pad_type_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_12x_pad_type_1"), val = tensor<string, []>("valid")];
            tensor<int32, []> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_12x_groups_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_12x_groups_1"), val = tensor<int32, []>(1)];
            tensor<int32, [1]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_12x_strides_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_12x_strides_1"), val = tensor<int32, [1]>([16])];
            tensor<int32, [2]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_12x_pad_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_12x_pad_1"), val = tensor<int32, [2]>([0, 0])];
            tensor<int32, [1]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_12x_dilations_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_12x_dilations_1"), val = tensor<int32, [1]>([1])];
            tensor<fp32, [1, 36, 172]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_12x = conv(dilations = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_12x_dilations_1, groups = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_12x_groups_1, pad = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_12x_pad_1, pad_type = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_12x_pad_type_1, strides = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_12x_strides_1, weight = squeeze_1, x = StatefulPartitionedCall_model_1_cq_t2010v2_1_reflection_pad1d_MirrorPad_4_pad)[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_12x")];
            tensor<string, []> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_13x_pad_type_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_13x_pad_type_1"), val = tensor<string, []>("valid")];
            tensor<int32, []> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_13x_groups_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_13x_groups_1"), val = tensor<int32, []>(1)];
            tensor<int32, [1]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_13x_strides_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_13x_strides_1"), val = tensor<int32, [1]>([16])];
            tensor<int32, [2]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_13x_pad_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_13x_pad_1"), val = tensor<int32, [2]>([0, 0])];
            tensor<int32, [1]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_13x_dilations_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_13x_dilations_1"), val = tensor<int32, [1]>([1])];
            tensor<fp32, [36]> StatefulPartitionedCall_model_1_cq_t2010v2_1_Neg_4_bias_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_Neg_4_bias_0"), val = tensor<fp32, [36]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(77376)))];
            tensor<fp32, [1, 36, 172]> StatefulPartitionedCall_model_1_cq_t2010v2_1_Neg_4 = conv(bias = StatefulPartitionedCall_model_1_cq_t2010v2_1_Neg_4_bias_0, dilations = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_13x_dilations_1, groups = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_13x_groups_1, pad = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_13x_pad_1, pad_type = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_13x_pad_type_1, strides = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_13x_strides_1, weight = StatefulPartitionedCall_model_1_cq_t2010v2_1_Neg_weight_0, x = StatefulPartitionedCall_model_1_cq_t2010v2_1_reflection_pad1d_MirrorPad_4_pad)[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_Neg_4")];
            tensor<fp32, []> const_9 = const()[name = tensor<string, []>("const_9"), val = tensor<fp32, []>(0x0p+0)];
            tensor<int32, [6]> pad_5_pad_0 = const()[name = tensor<string, []>("pad_5_pad_0"), val = tensor<int32, [6]>([0, 0, 0, 0, 127, 127])];
            tensor<string, []> pad_5_mode_0 = const()[name = tensor<string, []>("pad_5_mode_0"), val = tensor<string, []>("constant")];
            tensor<fp32, [1, 1, 1624]> pad_5 = pad(constant_val = const_9, mode = pad_5_mode_0, pad = pad_5_pad_0, x = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_14x)[name = tensor<string, []>("pad_5")];
            tensor<fp32, []> StatefulPartitionedCall_model_1_cq_t2010v2_1_reflection_pad1d_MirrorPad_5_pad_constant_val_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_reflection_pad1d_MirrorPad_5_pad_constant_val_0"), val = tensor<fp32, []>(0x0p+0)];
            tensor<string, []> StatefulPartitionedCall_model_1_cq_t2010v2_1_reflection_pad1d_MirrorPad_5_pad_mode_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_reflection_pad1d_MirrorPad_5_pad_mode_0"), val = tensor<string, []>("reflect")];
            tensor<int32, [4]> const_36 = const()[name = tensor<string, []>("const_36"), val = tensor<int32, [4]>([0, 0, 128, 128])];
            tensor<fp32, [1, 1, 1626]> StatefulPartitionedCall_model_1_cq_t2010v2_1_reflection_pad1d_MirrorPad_5_pad = pad(constant_val = StatefulPartitionedCall_model_1_cq_t2010v2_1_reflection_pad1d_MirrorPad_5_pad_constant_val_0, mode = StatefulPartitionedCall_model_1_cq_t2010v2_1_reflection_pad1d_MirrorPad_5_pad_mode_0, pad = const_36, x = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_14x)[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_reflection_pad1d_MirrorPad_5_pad")];
            tensor<int32, []> StatefulPartitionedCall_model_1_cq_t2010v2_1_stack_4_axis_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_stack_4_axis_0"), val = tensor<int32, []>(3)];
            tensor<fp32, [1, 36, 172, 2]> StatefulPartitionedCall_model_1_cq_t2010v2_1_stack_4 = stack(axis = StatefulPartitionedCall_model_1_cq_t2010v2_1_stack_4_axis_0, values = (StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_12x, StatefulPartitionedCall_model_1_cq_t2010v2_1_Neg_4))[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_stack_4")];
            tensor<string, []> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_17x_pad_type_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_17x_pad_type_1"), val = tensor<string, []>("valid")];
            tensor<int32, []> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_17x_groups_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_17x_groups_1"), val = tensor<int32, []>(1)];
            tensor<int32, [1]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_17x_strides_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_17x_strides_1"), val = tensor<int32, [1]>([2])];
            tensor<int32, [2]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_17x_pad_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_17x_pad_1"), val = tensor<int32, [2]>([0, 0])];
            tensor<int32, [1]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_17x_dilations_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_17x_dilations_1"), val = tensor<int32, [1]>([1])];
            tensor<fp32, [1, 1, 685]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_17x = conv(dilations = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_17x_dilations_1, groups = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_17x_groups_1, pad = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_17x_pad_1, pad_type = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_17x_pad_type_1, strides = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_17x_strides_1, weight = squeeze_0, x = pad_5)[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_17x")];
            tensor<string, []> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_15x_pad_type_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_15x_pad_type_1"), val = tensor<string, []>("valid")];
            tensor<int32, []> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_15x_groups_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_15x_groups_1"), val = tensor<int32, []>(1)];
            tensor<int32, [1]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_15x_strides_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_15x_strides_1"), val = tensor<int32, [1]>([8])];
            tensor<int32, [2]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_15x_pad_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_15x_pad_1"), val = tensor<int32, [2]>([0, 0])];
            tensor<int32, [1]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_15x_dilations_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_15x_dilations_1"), val = tensor<int32, [1]>([1])];
            tensor<fp32, [1, 36, 172]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_15x = conv(dilations = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_15x_dilations_1, groups = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_15x_groups_1, pad = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_15x_pad_1, pad_type = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_15x_pad_type_1, strides = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_15x_strides_1, weight = squeeze_1, x = StatefulPartitionedCall_model_1_cq_t2010v2_1_reflection_pad1d_MirrorPad_5_pad)[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_15x")];
            tensor<string, []> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_16x_pad_type_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_16x_pad_type_1"), val = tensor<string, []>("valid")];
            tensor<int32, []> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_16x_groups_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_16x_groups_1"), val = tensor<int32, []>(1)];
            tensor<int32, [1]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_16x_strides_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_16x_strides_1"), val = tensor<int32, [1]>([8])];
            tensor<int32, [2]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_16x_pad_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_16x_pad_1"), val = tensor<int32, [2]>([0, 0])];
            tensor<int32, [1]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_16x_dilations_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_16x_dilations_1"), val = tensor<int32, [1]>([1])];
            tensor<fp32, [36]> StatefulPartitionedCall_model_1_cq_t2010v2_1_Neg_5_bias_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_Neg_5_bias_0"), val = tensor<fp32, [36]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(77632)))];
            tensor<fp32, [1, 36, 172]> StatefulPartitionedCall_model_1_cq_t2010v2_1_Neg_5 = conv(bias = StatefulPartitionedCall_model_1_cq_t2010v2_1_Neg_5_bias_0, dilations = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_16x_dilations_1, groups = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_16x_groups_1, pad = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_16x_pad_1, pad_type = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_16x_pad_type_1, strides = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_16x_strides_1, weight = StatefulPartitionedCall_model_1_cq_t2010v2_1_Neg_weight_0, x = StatefulPartitionedCall_model_1_cq_t2010v2_1_reflection_pad1d_MirrorPad_5_pad)[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_Neg_5")];
            tensor<fp32, []> const_11 = const()[name = tensor<string, []>("const_11"), val = tensor<fp32, []>(0x0p+0)];
            tensor<int32, [6]> pad_6_pad_0 = const()[name = tensor<string, []>("pad_6_pad_0"), val = tensor<int32, [6]>([0, 0, 0, 0, 127, 127])];
            tensor<string, []> pad_6_mode_0 = const()[name = tensor<string, []>("pad_6_mode_0"), val = tensor<string, []>("constant")];
            tensor<fp32, [1, 1, 939]> pad_6 = pad(constant_val = const_11, mode = pad_6_mode_0, pad = pad_6_pad_0, x = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_17x)[name = tensor<string, []>("pad_6")];
            tensor<fp32, []> StatefulPartitionedCall_model_1_cq_t2010v2_1_reflection_pad1d_MirrorPad_6_pad_constant_val_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_reflection_pad1d_MirrorPad_6_pad_constant_val_0"), val = tensor<fp32, []>(0x0p+0)];
            tensor<string, []> StatefulPartitionedCall_model_1_cq_t2010v2_1_reflection_pad1d_MirrorPad_6_pad_mode_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_reflection_pad1d_MirrorPad_6_pad_mode_0"), val = tensor<string, []>("reflect")];
            tensor<int32, [4]> const_37 = const()[name = tensor<string, []>("const_37"), val = tensor<int32, [4]>([0, 0, 128, 128])];
            tensor<fp32, [1, 1, 941]> StatefulPartitionedCall_model_1_cq_t2010v2_1_reflection_pad1d_MirrorPad_6_pad = pad(constant_val = StatefulPartitionedCall_model_1_cq_t2010v2_1_reflection_pad1d_MirrorPad_6_pad_constant_val_0, mode = StatefulPartitionedCall_model_1_cq_t2010v2_1_reflection_pad1d_MirrorPad_6_pad_mode_0, pad = const_37, x = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_17x)[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_reflection_pad1d_MirrorPad_6_pad")];
            tensor<int32, []> StatefulPartitionedCall_model_1_cq_t2010v2_1_stack_5_axis_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_stack_5_axis_0"), val = tensor<int32, []>(3)];
            tensor<fp32, [1, 36, 172, 2]> StatefulPartitionedCall_model_1_cq_t2010v2_1_stack_5 = stack(axis = StatefulPartitionedCall_model_1_cq_t2010v2_1_stack_5_axis_0, values = (StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_15x, StatefulPartitionedCall_model_1_cq_t2010v2_1_Neg_5))[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_stack_5")];
            tensor<string, []> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_20x_pad_type_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_20x_pad_type_1"), val = tensor<string, []>("valid")];
            tensor<int32, []> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_20x_groups_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_20x_groups_1"), val = tensor<int32, []>(1)];
            tensor<int32, [1]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_20x_strides_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_20x_strides_1"), val = tensor<int32, [1]>([2])];
            tensor<int32, [2]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_20x_pad_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_20x_pad_1"), val = tensor<int32, [2]>([0, 0])];
            tensor<int32, [1]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_20x_dilations_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_20x_dilations_1"), val = tensor<int32, [1]>([1])];
            tensor<fp32, [1, 1, 342]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_20x = conv(dilations = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_20x_dilations_1, groups = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_20x_groups_1, pad = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_20x_pad_1, pad_type = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_20x_pad_type_1, strides = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_20x_strides_1, weight = squeeze_0, x = pad_6)[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_20x")];
            tensor<string, []> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_18x_pad_type_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_18x_pad_type_1"), val = tensor<string, []>("valid")];
            tensor<int32, []> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_18x_groups_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_18x_groups_1"), val = tensor<int32, []>(1)];
            tensor<int32, [1]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_18x_strides_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_18x_strides_1"), val = tensor<int32, [1]>([4])];
            tensor<int32, [2]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_18x_pad_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_18x_pad_1"), val = tensor<int32, [2]>([0, 0])];
            tensor<int32, [1]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_18x_dilations_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_18x_dilations_1"), val = tensor<int32, [1]>([1])];
            tensor<fp32, [1, 36, 172]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_18x = conv(dilations = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_18x_dilations_1, groups = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_18x_groups_1, pad = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_18x_pad_1, pad_type = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_18x_pad_type_1, strides = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_18x_strides_1, weight = squeeze_1, x = StatefulPartitionedCall_model_1_cq_t2010v2_1_reflection_pad1d_MirrorPad_6_pad)[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_18x")];
            tensor<string, []> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_19x_pad_type_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_19x_pad_type_1"), val = tensor<string, []>("valid")];
            tensor<int32, []> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_19x_groups_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_19x_groups_1"), val = tensor<int32, []>(1)];
            tensor<int32, [1]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_19x_strides_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_19x_strides_1"), val = tensor<int32, [1]>([4])];
            tensor<int32, [2]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_19x_pad_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_19x_pad_1"), val = tensor<int32, [2]>([0, 0])];
            tensor<int32, [1]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_19x_dilations_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_19x_dilations_1"), val = tensor<int32, [1]>([1])];
            tensor<fp32, [36]> StatefulPartitionedCall_model_1_cq_t2010v2_1_Neg_6_bias_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_Neg_6_bias_0"), val = tensor<fp32, [36]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(77888)))];
            tensor<fp32, [1, 36, 172]> StatefulPartitionedCall_model_1_cq_t2010v2_1_Neg_6 = conv(bias = StatefulPartitionedCall_model_1_cq_t2010v2_1_Neg_6_bias_0, dilations = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_19x_dilations_1, groups = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_19x_groups_1, pad = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_19x_pad_1, pad_type = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_19x_pad_type_1, strides = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_19x_strides_1, weight = StatefulPartitionedCall_model_1_cq_t2010v2_1_Neg_weight_0, x = StatefulPartitionedCall_model_1_cq_t2010v2_1_reflection_pad1d_MirrorPad_6_pad)[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_Neg_6")];
            tensor<fp32, []> const_13 = const()[name = tensor<string, []>("const_13"), val = tensor<fp32, []>(0x0p+0)];
            tensor<int32, [6]> pad_7_pad_0 = const()[name = tensor<string, []>("pad_7_pad_0"), val = tensor<int32, [6]>([0, 0, 0, 0, 127, 127])];
            tensor<string, []> pad_7_mode_0 = const()[name = tensor<string, []>("pad_7_mode_0"), val = tensor<string, []>("constant")];
            tensor<fp32, [1, 1, 596]> pad_7 = pad(constant_val = const_13, mode = pad_7_mode_0, pad = pad_7_pad_0, x = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_20x)[name = tensor<string, []>("pad_7")];
            tensor<fp32, []> StatefulPartitionedCall_model_1_cq_t2010v2_1_reflection_pad1d_MirrorPad_7_pad_constant_val_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_reflection_pad1d_MirrorPad_7_pad_constant_val_0"), val = tensor<fp32, []>(0x0p+0)];
            tensor<string, []> StatefulPartitionedCall_model_1_cq_t2010v2_1_reflection_pad1d_MirrorPad_7_pad_mode_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_reflection_pad1d_MirrorPad_7_pad_mode_0"), val = tensor<string, []>("reflect")];
            tensor<int32, [4]> const_38 = const()[name = tensor<string, []>("const_38"), val = tensor<int32, [4]>([0, 0, 128, 128])];
            tensor<fp32, [1, 1, 598]> StatefulPartitionedCall_model_1_cq_t2010v2_1_reflection_pad1d_MirrorPad_7_pad = pad(constant_val = StatefulPartitionedCall_model_1_cq_t2010v2_1_reflection_pad1d_MirrorPad_7_pad_constant_val_0, mode = StatefulPartitionedCall_model_1_cq_t2010v2_1_reflection_pad1d_MirrorPad_7_pad_mode_0, pad = const_38, x = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_20x)[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_reflection_pad1d_MirrorPad_7_pad")];
            tensor<int32, []> StatefulPartitionedCall_model_1_cq_t2010v2_1_stack_6_axis_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_stack_6_axis_0"), val = tensor<int32, []>(3)];
            tensor<fp32, [1, 36, 172, 2]> StatefulPartitionedCall_model_1_cq_t2010v2_1_stack_6 = stack(axis = StatefulPartitionedCall_model_1_cq_t2010v2_1_stack_6_axis_0, values = (StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_18x, StatefulPartitionedCall_model_1_cq_t2010v2_1_Neg_6))[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_stack_6")];
            tensor<string, []> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_23x_pad_type_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_23x_pad_type_1"), val = tensor<string, []>("valid")];
            tensor<int32, []> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_23x_groups_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_23x_groups_1"), val = tensor<int32, []>(1)];
            tensor<int32, [1]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_23x_strides_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_23x_strides_1"), val = tensor<int32, [1]>([2])];
            tensor<int32, [2]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_23x_pad_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_23x_pad_1"), val = tensor<int32, [2]>([0, 0])];
            tensor<int32, [1]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_23x_dilations_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_23x_dilations_1"), val = tensor<int32, [1]>([1])];
            tensor<fp32, [1, 1, 171]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_23x = conv(dilations = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_23x_dilations_1, groups = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_23x_groups_1, pad = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_23x_pad_1, pad_type = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_23x_pad_type_1, strides = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_23x_strides_1, weight = squeeze_0, x = pad_7)[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_23x")];
            tensor<string, []> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_21x_pad_type_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_21x_pad_type_1"), val = tensor<string, []>("valid")];
            tensor<int32, []> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_21x_groups_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_21x_groups_1"), val = tensor<int32, []>(1)];
            tensor<int32, [1]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_21x_strides_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_21x_strides_1"), val = tensor<int32, [1]>([2])];
            tensor<int32, [2]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_21x_pad_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_21x_pad_1"), val = tensor<int32, [2]>([0, 0])];
            tensor<int32, [1]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_21x_dilations_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_21x_dilations_1"), val = tensor<int32, [1]>([1])];
            tensor<fp32, [1, 36, 172]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_21x = conv(dilations = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_21x_dilations_1, groups = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_21x_groups_1, pad = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_21x_pad_1, pad_type = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_21x_pad_type_1, strides = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_21x_strides_1, weight = squeeze_1, x = StatefulPartitionedCall_model_1_cq_t2010v2_1_reflection_pad1d_MirrorPad_7_pad)[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_21x")];
            tensor<string, []> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_22x_pad_type_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_22x_pad_type_1"), val = tensor<string, []>("valid")];
            tensor<int32, []> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_22x_groups_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_22x_groups_1"), val = tensor<int32, []>(1)];
            tensor<int32, [1]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_22x_strides_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_22x_strides_1"), val = tensor<int32, [1]>([2])];
            tensor<int32, [2]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_22x_pad_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_22x_pad_1"), val = tensor<int32, [2]>([0, 0])];
            tensor<int32, [1]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_22x_dilations_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_22x_dilations_1"), val = tensor<int32, [1]>([1])];
            tensor<fp32, [36]> StatefulPartitionedCall_model_1_cq_t2010v2_1_Neg_7_bias_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_Neg_7_bias_0"), val = tensor<fp32, [36]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(78144)))];
            tensor<fp32, [1, 36, 172]> StatefulPartitionedCall_model_1_cq_t2010v2_1_Neg_7 = conv(bias = StatefulPartitionedCall_model_1_cq_t2010v2_1_Neg_7_bias_0, dilations = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_22x_dilations_1, groups = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_22x_groups_1, pad = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_22x_pad_1, pad_type = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_22x_pad_type_1, strides = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_22x_strides_1, weight = StatefulPartitionedCall_model_1_cq_t2010v2_1_Neg_weight_0, x = StatefulPartitionedCall_model_1_cq_t2010v2_1_reflection_pad1d_MirrorPad_7_pad)[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_Neg_7")];
            tensor<fp32, []> StatefulPartitionedCall_model_1_cq_t2010v2_1_reflection_pad1d_MirrorPad_8_pad_constant_val_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_reflection_pad1d_MirrorPad_8_pad_constant_val_0"), val = tensor<fp32, []>(0x0p+0)];
            tensor<string, []> StatefulPartitionedCall_model_1_cq_t2010v2_1_reflection_pad1d_MirrorPad_8_pad_mode_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_reflection_pad1d_MirrorPad_8_pad_mode_0"), val = tensor<string, []>("reflect")];
            tensor<int32, [4]> const_39 = const()[name = tensor<string, []>("const_39"), val = tensor<int32, [4]>([0, 0, 128, 128])];
            tensor<fp32, [1, 1, 427]> StatefulPartitionedCall_model_1_cq_t2010v2_1_reflection_pad1d_MirrorPad_8_pad = pad(constant_val = StatefulPartitionedCall_model_1_cq_t2010v2_1_reflection_pad1d_MirrorPad_8_pad_constant_val_0, mode = StatefulPartitionedCall_model_1_cq_t2010v2_1_reflection_pad1d_MirrorPad_8_pad_mode_0, pad = const_39, x = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_23x)[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_reflection_pad1d_MirrorPad_8_pad")];
            tensor<int32, []> StatefulPartitionedCall_model_1_cq_t2010v2_1_stack_7_axis_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_stack_7_axis_0"), val = tensor<int32, []>(3)];
            tensor<fp32, [1, 36, 172, 2]> StatefulPartitionedCall_model_1_cq_t2010v2_1_stack_7 = stack(axis = StatefulPartitionedCall_model_1_cq_t2010v2_1_stack_7_axis_0, values = (StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_21x, StatefulPartitionedCall_model_1_cq_t2010v2_1_Neg_7))[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_stack_7")];
            tensor<string, []> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_24x_pad_type_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_24x_pad_type_1"), val = tensor<string, []>("valid")];
            tensor<int32, []> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_24x_groups_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_24x_groups_1"), val = tensor<int32, []>(1)];
            tensor<int32, [1]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_24x_strides_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_24x_strides_1"), val = tensor<int32, [1]>([1])];
            tensor<int32, [2]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_24x_pad_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_24x_pad_1"), val = tensor<int32, [2]>([0, 0])];
            tensor<int32, [1]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_24x_dilations_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_24x_dilations_1"), val = tensor<int32, [1]>([1])];
            tensor<fp32, [1, 36, 172]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_24x = conv(dilations = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_24x_dilations_1, groups = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_24x_groups_1, pad = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_24x_pad_1, pad_type = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_24x_pad_type_1, strides = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_24x_strides_1, weight = squeeze_1, x = StatefulPartitionedCall_model_1_cq_t2010v2_1_reflection_pad1d_MirrorPad_8_pad)[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_24x")];
            tensor<string, []> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_25x_pad_type_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_25x_pad_type_1"), val = tensor<string, []>("valid")];
            tensor<int32, []> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_25x_groups_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_25x_groups_1"), val = tensor<int32, []>(1)];
            tensor<int32, [1]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_25x_strides_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_25x_strides_1"), val = tensor<int32, [1]>([1])];
            tensor<int32, [2]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_25x_pad_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_25x_pad_1"), val = tensor<int32, [2]>([0, 0])];
            tensor<int32, [1]> StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_25x_dilations_1 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_25x_dilations_1"), val = tensor<int32, [1]>([1])];
            tensor<fp32, [36]> StatefulPartitionedCall_model_1_cq_t2010v2_1_Neg_8_bias_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_Neg_8_bias_0"), val = tensor<fp32, [36]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(78400)))];
            tensor<fp32, [1, 36, 172]> StatefulPartitionedCall_model_1_cq_t2010v2_1_Neg_8 = conv(bias = StatefulPartitionedCall_model_1_cq_t2010v2_1_Neg_8_bias_0, dilations = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_25x_dilations_1, groups = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_25x_groups_1, pad = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_25x_pad_1, pad_type = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_25x_pad_type_1, strides = StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_25x_strides_1, weight = StatefulPartitionedCall_model_1_cq_t2010v2_1_Neg_weight_0, x = StatefulPartitionedCall_model_1_cq_t2010v2_1_reflection_pad1d_MirrorPad_8_pad)[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_Neg_8")];
            tensor<int32, []> StatefulPartitionedCall_model_1_cq_t2010v2_1_stack_8_axis_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_stack_8_axis_0"), val = tensor<int32, []>(3)];
            tensor<fp32, [1, 36, 172, 2]> StatefulPartitionedCall_model_1_cq_t2010v2_1_stack_8 = stack(axis = StatefulPartitionedCall_model_1_cq_t2010v2_1_stack_8_axis_0, values = (StatefulPartitionedCall_model_1_cq_t2010v2_1_conv1d_24x, StatefulPartitionedCall_model_1_cq_t2010v2_1_Neg_8))[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_stack_8")];
            tensor<bool, []> StatefulPartitionedCall_model_1_cq_t2010v2_1_concat_7_interleave_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_concat_7_interleave_0"), val = tensor<bool, []>(false)];
            tensor<fp32, [1, 324, 172, 2]> StatefulPartitionedCall_model_1_cq_t2010v2_1_concat_7 = concat(axis = StatefulPartitionedCall_model_1_cq_t2010v2_1_concat_7_axis, interleave = StatefulPartitionedCall_model_1_cq_t2010v2_1_concat_7_interleave_0, values = (StatefulPartitionedCall_model_1_cq_t2010v2_1_stack_8, StatefulPartitionedCall_model_1_cq_t2010v2_1_stack_7, StatefulPartitionedCall_model_1_cq_t2010v2_1_stack_6, StatefulPartitionedCall_model_1_cq_t2010v2_1_stack_5, StatefulPartitionedCall_model_1_cq_t2010v2_1_stack_4, StatefulPartitionedCall_model_1_cq_t2010v2_1_stack_3, StatefulPartitionedCall_model_1_cq_t2010v2_1_stack_2, StatefulPartitionedCall_model_1_cq_t2010v2_1_stack_1, StatefulPartitionedCall_model_1_cq_t2010v2_1_stack))[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_concat_7")];
            tensor<int32, [4]> StatefulPartitionedCall_model_1_cq_t2010v2_1_strided_slice_9_begin_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_strided_slice_9_begin_0"), val = tensor<int32, [4]>([0, 15, 0, 0])];
            tensor<int32, [4]> StatefulPartitionedCall_model_1_cq_t2010v2_1_strided_slice_9_end_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_strided_slice_9_end_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [4]> StatefulPartitionedCall_model_1_cq_t2010v2_1_strided_slice_9_stride_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_strided_slice_9_stride_0"), val = tensor<int32, [4]>([1, 1, 1, 1])];
            tensor<bool, [4]> StatefulPartitionedCall_model_1_cq_t2010v2_1_strided_slice_9_begin_mask_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_strided_slice_9_begin_mask_0"), val = tensor<bool, [4]>([true, false, true, true])];
            tensor<bool, [4]> StatefulPartitionedCall_model_1_cq_t2010v2_1_strided_slice_9_end_mask_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_strided_slice_9_end_mask_0"), val = tensor<bool, [4]>([true, true, true, true])];
            tensor<bool, [4]> StatefulPartitionedCall_model_1_cq_t2010v2_1_strided_slice_9_squeeze_mask_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_strided_slice_9_squeeze_mask_0"), val = tensor<bool, [4]>([false, false, false, false])];
            tensor<fp32, [1, 309, 172, 2]> StatefulPartitionedCall_model_1_cq_t2010v2_1_strided_slice_9 = slice_by_index(begin = StatefulPartitionedCall_model_1_cq_t2010v2_1_strided_slice_9_begin_0, begin_mask = StatefulPartitionedCall_model_1_cq_t2010v2_1_strided_slice_9_begin_mask_0, end = StatefulPartitionedCall_model_1_cq_t2010v2_1_strided_slice_9_end_0, end_mask = StatefulPartitionedCall_model_1_cq_t2010v2_1_strided_slice_9_end_mask_0, squeeze_mask = StatefulPartitionedCall_model_1_cq_t2010v2_1_strided_slice_9_squeeze_mask_0, stride = StatefulPartitionedCall_model_1_cq_t2010v2_1_strided_slice_9_stride_0, x = StatefulPartitionedCall_model_1_cq_t2010v2_1_concat_7)[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_strided_slice_9")];
            tensor<fp32, [1, 309, 172, 2]> StatefulPartitionedCall_model_1_cq_t2010v2_1_mul_1 = mul(x = StatefulPartitionedCall_model_1_cq_t2010v2_1_strided_slice_9, y = StatefulPartitionedCall_model_1_cq_t2010v2_1_Sqrt)[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_mul_1")];
            tensor<fp32, [1, 309, 172, 2]> StatefulPartitionedCall_model_1_cq_t2010v2_1_Pow = pow(x = StatefulPartitionedCall_model_1_cq_t2010v2_1_mul_1, y = StatefulPartitionedCall_model_1_cq_t2010v2_1_Pow_y)[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_Pow")];
            tensor<int32, [1]> StatefulPartitionedCall_model_1_cq_t2010v2_1_Sum_axes_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_Sum_axes_0"), val = tensor<int32, [1]>([-1])];
            tensor<bool, []> StatefulPartitionedCall_model_1_cq_t2010v2_1_Sum_keep_dims_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_Sum_keep_dims_0"), val = tensor<bool, []>(false)];
            tensor<fp32, [1, 309, 172]> StatefulPartitionedCall_model_1_cq_t2010v2_1_Sum = reduce_sum(axes = StatefulPartitionedCall_model_1_cq_t2010v2_1_Sum_axes_0, keep_dims = StatefulPartitionedCall_model_1_cq_t2010v2_1_Sum_keep_dims_0, x = StatefulPartitionedCall_model_1_cq_t2010v2_1_Pow)[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_Sum")];
            tensor<fp32, [1, 309, 172]> StatefulPartitionedCall_model_1_cq_t2010v2_1_Sqrt_1 = sqrt(x = StatefulPartitionedCall_model_1_cq_t2010v2_1_Sum)[name = tensor<string, []>("StatefulPartitionedCall_model_1_cq_t2010v2_1_Sqrt_1")];
            tensor<fp32, [1, 172, 309]> transpose_75 = transpose(perm = StatefulPartitionedCall_model_1_cq_t2010v2_1_transpose_70_perm, x = StatefulPartitionedCall_model_1_cq_t2010v2_1_Sqrt_1)[name = tensor<string, []>("transpose_75")];
            tensor<fp32, [1, 172, 309]> StatefulPartitionedCall_model_1_normalized_log_1_Square = mul(x = transpose_75, y = transpose_75)[name = tensor<string, []>("StatefulPartitionedCall_model_1_normalized_log_1_Square")];
            tensor<fp32, [1, 172, 309]> StatefulPartitionedCall_model_1_normalized_log_1_add = add(x = StatefulPartitionedCall_model_1_normalized_log_1_Square, y = StatefulPartitionedCall_model_1_normalized_log_1_add_y)[name = tensor<string, []>("StatefulPartitionedCall_model_1_normalized_log_1_add")];
            tensor<fp32, []> StatefulPartitionedCall_model_1_normalized_log_1_Log_epsilon_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_normalized_log_1_Log_epsilon_0"), val = tensor<fp32, []>(0x1p-149)];
            tensor<fp32, [1, 172, 309]> StatefulPartitionedCall_model_1_normalized_log_1_Log = log(epsilon = StatefulPartitionedCall_model_1_normalized_log_1_Log_epsilon_0, x = StatefulPartitionedCall_model_1_normalized_log_1_add)[name = tensor<string, []>("StatefulPartitionedCall_model_1_normalized_log_1_Log")];
            tensor<int32, [3]> StatefulPartitionedCall_model_1_normalized_log_1_Reshape_shape = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_normalized_log_1_Reshape_shape"), val = tensor<int32, [3]>([1, 1, 1])];
            tensor<int32, [3]> StatefulPartitionedCall_model_1_normalized_log_1_Reshape_1_shape = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_normalized_log_1_Reshape_1_shape"), val = tensor<int32, [3]>([1, 1, 1])];
            tensor<fp32, [1, 172, 309]> StatefulPartitionedCall_model_1_normalized_log_1_mul = mul(x = StatefulPartitionedCall_model_1_normalized_log_1_Log, y = StatefulPartitionedCall_model_1_normalized_log_1_truediv)[name = tensor<string, []>("StatefulPartitionedCall_model_1_normalized_log_1_mul")];
            tensor<int32, [2]> StatefulPartitionedCall_model_1_normalized_log_1_Min_axes_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_normalized_log_1_Min_axes_0"), val = tensor<int32, [2]>([1, 2])];
            tensor<bool, []> StatefulPartitionedCall_model_1_normalized_log_1_Min_keep_dims_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_normalized_log_1_Min_keep_dims_0"), val = tensor<bool, []>(false)];
            tensor<fp32, [1]> StatefulPartitionedCall_model_1_normalized_log_1_Min = reduce_min(axes = StatefulPartitionedCall_model_1_normalized_log_1_Min_axes_0, keep_dims = StatefulPartitionedCall_model_1_normalized_log_1_Min_keep_dims_0, x = StatefulPartitionedCall_model_1_normalized_log_1_mul)[name = tensor<string, []>("StatefulPartitionedCall_model_1_normalized_log_1_Min")];
            tensor<fp32, [1, 1, 1]> StatefulPartitionedCall_model_1_normalized_log_1_Reshape = reshape(shape = StatefulPartitionedCall_model_1_normalized_log_1_Reshape_shape, x = StatefulPartitionedCall_model_1_normalized_log_1_Min)[name = tensor<string, []>("StatefulPartitionedCall_model_1_normalized_log_1_Reshape")];
            tensor<fp32, [1, 172, 309]> StatefulPartitionedCall_model_1_normalized_log_1_sub = sub(x = StatefulPartitionedCall_model_1_normalized_log_1_mul, y = StatefulPartitionedCall_model_1_normalized_log_1_Reshape)[name = tensor<string, []>("StatefulPartitionedCall_model_1_normalized_log_1_sub")];
            tensor<int32, [2]> StatefulPartitionedCall_model_1_normalized_log_1_Max_axes_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_normalized_log_1_Max_axes_0"), val = tensor<int32, [2]>([1, 2])];
            tensor<bool, []> StatefulPartitionedCall_model_1_normalized_log_1_Max_keep_dims_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_normalized_log_1_Max_keep_dims_0"), val = tensor<bool, []>(false)];
            tensor<fp32, [1]> StatefulPartitionedCall_model_1_normalized_log_1_Max = reduce_max(axes = StatefulPartitionedCall_model_1_normalized_log_1_Max_axes_0, keep_dims = StatefulPartitionedCall_model_1_normalized_log_1_Max_keep_dims_0, x = StatefulPartitionedCall_model_1_normalized_log_1_sub)[name = tensor<string, []>("StatefulPartitionedCall_model_1_normalized_log_1_Max")];
            tensor<fp32, [1, 1, 1]> StatefulPartitionedCall_model_1_normalized_log_1_Reshape_1 = reshape(shape = StatefulPartitionedCall_model_1_normalized_log_1_Reshape_1_shape, x = StatefulPartitionedCall_model_1_normalized_log_1_Max)[name = tensor<string, []>("StatefulPartitionedCall_model_1_normalized_log_1_Reshape_1")];
            tensor<fp32, [1, 172, 309]> StatefulPartitionedCall_model_1_normalized_log_1_div_no_nan = real_div(x = StatefulPartitionedCall_model_1_normalized_log_1_sub, y = StatefulPartitionedCall_model_1_normalized_log_1_Reshape_1)[name = tensor<string, []>("StatefulPartitionedCall_model_1_normalized_log_1_div_no_nan")];
            tensor<int32, [1]> StatefulPartitionedCall_model_1_tf_expand_dims_1_ExpandDims_axes_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_tf_expand_dims_1_ExpandDims_axes_0"), val = tensor<int32, [1]>([-1])];
            tensor<fp32, [1, 172, 309, 1]> StatefulPartitionedCall_model_1_tf_expand_dims_1_ExpandDims = expand_dims(axes = StatefulPartitionedCall_model_1_tf_expand_dims_1_ExpandDims_axes_0, x = StatefulPartitionedCall_model_1_normalized_log_1_div_no_nan)[name = tensor<string, []>("StatefulPartitionedCall_model_1_tf_expand_dims_1_ExpandDims")];
            tensor<int32, [4]> transpose_52_perm_0 = const()[name = tensor<string, []>("transpose_52_perm_0"), val = tensor<int32, [4]>([0, 3, 1, 2])];
            tensor<fp32, []> StatefulPartitionedCall_model_1_batch_normalization_FusedBatchNormV3_nchw_epsilon_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_batch_normalization_FusedBatchNormV3_nchw_epsilon_0"), val = tensor<fp32, []>(0x1.0624dep-10)];
            tensor<fp32, [1, 1, 172, 309]> transpose_74 = transpose(perm = transpose_52_perm_0, x = StatefulPartitionedCall_model_1_tf_expand_dims_1_ExpandDims)[name = tensor<string, []>("transpose_74")];
            tensor<fp32, [1, 1, 172, 309]> StatefulPartitionedCall_model_1_batch_normalization_FusedBatchNormV3_nchw = batch_norm(beta = StatefulPartitionedCall_model_1_batch_normalization_ReadVariableOp_1, epsilon = StatefulPartitionedCall_model_1_batch_normalization_FusedBatchNormV3_nchw_epsilon_0, gamma = StatefulPartitionedCall_model_1_batch_normalization_ReadVariableOp, mean = StatefulPartitionedCall_model_1_batch_normalization_FusedBatchNormV3_ReadVariableOp, variance = StatefulPartitionedCall_model_1_batch_normalization_FusedBatchNormV3_ReadVariableOp_1, x = transpose_74)[name = tensor<string, []>("StatefulPartitionedCall_model_1_batch_normalization_FusedBatchNormV3_nchw")];
            tensor<int32, [4]> StatefulPartitionedCall_model_1_batch_normalization_FusedBatchNormV3_to_NHWC_perm_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_batch_normalization_FusedBatchNormV3_to_NHWC_perm_0"), val = tensor<int32, [4]>([0, 2, 3, 1])];
            tensor<int32, [4]> StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_begin_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_begin_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [4]> StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_end_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_end_0"), val = tensor<int32, [4]>([0, 0, 273, 0])];
            tensor<int32, [4]> StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_stride_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_stride_0"), val = tensor<int32, [4]>([1, 1, 1, 1])];
            tensor<bool, [4]> StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_begin_mask_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_begin_mask_0"), val = tensor<bool, [4]>([true, true, true, true])];
            tensor<bool, [4]> StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_end_mask_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_end_mask_0"), val = tensor<bool, [4]>([true, true, false, true])];
            tensor<bool, [4]> StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_squeeze_mask_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_squeeze_mask_0"), val = tensor<bool, [4]>([false, false, false, false])];
            tensor<fp32, [1, 172, 309, 1]> transpose_73 = transpose(perm = StatefulPartitionedCall_model_1_batch_normalization_FusedBatchNormV3_to_NHWC_perm_0, x = StatefulPartitionedCall_model_1_batch_normalization_FusedBatchNormV3_nchw)[name = tensor<string, []>("transpose_73")];
            tensor<fp32, [1, 172, 273, 1]> StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice = slice_by_index(begin = StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_begin_0, begin_mask = StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_begin_mask_0, end = StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_end_0, end_mask = StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_end_mask_0, squeeze_mask = StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_squeeze_mask_0, stride = StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_stride_0, x = transpose_73)[name = tensor<string, []>("StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice")];
            tensor<int32, [4]> StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_1_begin_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_1_begin_0"), val = tensor<int32, [4]>([0, 0, 36, 0])];
            tensor<int32, [4]> StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_1_end_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_1_end_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [4]> StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_1_stride_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_1_stride_0"), val = tensor<int32, [4]>([1, 1, 1, 1])];
            tensor<bool, [4]> StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_1_begin_mask_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_1_begin_mask_0"), val = tensor<bool, [4]>([true, true, false, true])];
            tensor<bool, [4]> StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_1_end_mask_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_1_end_mask_0"), val = tensor<bool, [4]>([true, true, true, true])];
            tensor<bool, [4]> StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_1_squeeze_mask_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_1_squeeze_mask_0"), val = tensor<bool, [4]>([false, false, false, false])];
            tensor<fp32, [1, 172, 273, 1]> StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_1 = slice_by_index(begin = StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_1_begin_0, begin_mask = StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_1_begin_mask_0, end = StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_1_end_0, end_mask = StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_1_end_mask_0, squeeze_mask = StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_1_squeeze_mask_0, stride = StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_1_stride_0, x = transpose_73)[name = tensor<string, []>("StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_1")];
            tensor<int32, [4]> StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_2_begin_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_2_begin_0"), val = tensor<int32, [4]>([0, 0, 57, 0])];
            tensor<int32, [4]> StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_2_end_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_2_end_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [4]> StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_2_stride_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_2_stride_0"), val = tensor<int32, [4]>([1, 1, 1, 1])];
            tensor<bool, [4]> StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_2_begin_mask_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_2_begin_mask_0"), val = tensor<bool, [4]>([true, true, false, true])];
            tensor<bool, [4]> StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_2_end_mask_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_2_end_mask_0"), val = tensor<bool, [4]>([true, true, true, true])];
            tensor<bool, [4]> StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_2_squeeze_mask_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_2_squeeze_mask_0"), val = tensor<bool, [4]>([false, false, false, false])];
            tensor<fp32, [1, 172, 252, 1]> StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_2 = slice_by_index(begin = StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_2_begin_0, begin_mask = StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_2_begin_mask_0, end = StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_2_end_0, end_mask = StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_2_end_mask_0, squeeze_mask = StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_2_squeeze_mask_0, stride = StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_2_stride_0, x = transpose_73)[name = tensor<string, []>("StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_2")];
            tensor<int32, [4]> StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_3_begin_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_3_begin_0"), val = tensor<int32, [4]>([0, 0, 72, 0])];
            tensor<int32, [4]> StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_3_end_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_3_end_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [4]> StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_3_stride_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_3_stride_0"), val = tensor<int32, [4]>([1, 1, 1, 1])];
            tensor<bool, [4]> StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_3_begin_mask_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_3_begin_mask_0"), val = tensor<bool, [4]>([true, true, false, true])];
            tensor<bool, [4]> StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_3_end_mask_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_3_end_mask_0"), val = tensor<bool, [4]>([true, true, true, true])];
            tensor<bool, [4]> StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_3_squeeze_mask_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_3_squeeze_mask_0"), val = tensor<bool, [4]>([false, false, false, false])];
            tensor<fp32, [1, 172, 237, 1]> StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_3 = slice_by_index(begin = StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_3_begin_0, begin_mask = StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_3_begin_mask_0, end = StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_3_end_0, end_mask = StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_3_end_mask_0, squeeze_mask = StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_3_squeeze_mask_0, stride = StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_3_stride_0, x = transpose_73)[name = tensor<string, []>("StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_3")];
            tensor<int32, [4]> StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_4_begin_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_4_begin_0"), val = tensor<int32, [4]>([0, 0, 84, 0])];
            tensor<int32, [4]> StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_4_end_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_4_end_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [4]> StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_4_stride_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_4_stride_0"), val = tensor<int32, [4]>([1, 1, 1, 1])];
            tensor<bool, [4]> StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_4_begin_mask_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_4_begin_mask_0"), val = tensor<bool, [4]>([true, true, false, true])];
            tensor<bool, [4]> StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_4_end_mask_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_4_end_mask_0"), val = tensor<bool, [4]>([true, true, true, true])];
            tensor<bool, [4]> StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_4_squeeze_mask_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_4_squeeze_mask_0"), val = tensor<bool, [4]>([false, false, false, false])];
            tensor<fp32, [1, 172, 225, 1]> StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_4 = slice_by_index(begin = StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_4_begin_0, begin_mask = StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_4_begin_mask_0, end = StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_4_end_0, end_mask = StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_4_end_mask_0, squeeze_mask = StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_4_squeeze_mask_0, stride = StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_4_stride_0, x = transpose_73)[name = tensor<string, []>("StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_4")];
            tensor<int32, [4]> StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_5_begin_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_5_begin_0"), val = tensor<int32, [4]>([0, 0, 93, 0])];
            tensor<int32, [4]> StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_5_end_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_5_end_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [4]> StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_5_stride_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_5_stride_0"), val = tensor<int32, [4]>([1, 1, 1, 1])];
            tensor<bool, [4]> StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_5_begin_mask_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_5_begin_mask_0"), val = tensor<bool, [4]>([true, true, false, true])];
            tensor<bool, [4]> StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_5_end_mask_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_5_end_mask_0"), val = tensor<bool, [4]>([true, true, true, true])];
            tensor<bool, [4]> StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_5_squeeze_mask_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_5_squeeze_mask_0"), val = tensor<bool, [4]>([false, false, false, false])];
            tensor<fp32, [1, 172, 216, 1]> StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_5 = slice_by_index(begin = StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_5_begin_0, begin_mask = StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_5_begin_mask_0, end = StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_5_end_0, end_mask = StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_5_end_mask_0, squeeze_mask = StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_5_squeeze_mask_0, stride = StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_5_stride_0, x = transpose_73)[name = tensor<string, []>("StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_5")];
            tensor<int32, [4]> StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_6_begin_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_6_begin_0"), val = tensor<int32, [4]>([0, 0, 101, 0])];
            tensor<int32, [4]> StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_6_end_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_6_end_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [4]> StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_6_stride_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_6_stride_0"), val = tensor<int32, [4]>([1, 1, 1, 1])];
            tensor<bool, [4]> StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_6_begin_mask_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_6_begin_mask_0"), val = tensor<bool, [4]>([true, true, false, true])];
            tensor<bool, [4]> StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_6_end_mask_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_6_end_mask_0"), val = tensor<bool, [4]>([true, true, true, true])];
            tensor<bool, [4]> StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_6_squeeze_mask_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_6_squeeze_mask_0"), val = tensor<bool, [4]>([false, false, false, false])];
            tensor<fp32, [1, 172, 208, 1]> StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_6 = slice_by_index(begin = StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_6_begin_0, begin_mask = StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_6_begin_mask_0, end = StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_6_end_0, end_mask = StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_6_end_mask_0, squeeze_mask = StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_6_squeeze_mask_0, stride = StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_6_stride_0, x = transpose_73)[name = tensor<string, []>("StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_6")];
            tensor<fp32, []> const_17 = const()[name = tensor<string, []>("const_17"), val = tensor<fp32, []>(0x0p+0)];
            tensor<int32, [8]> pad_8_pad_0 = const()[name = tensor<string, []>("pad_8_pad_0"), val = tensor<int32, [8]>([0, 0, 0, 0, 36, 0, 0, 0])];
            tensor<string, []> pad_8_mode_0 = const()[name = tensor<string, []>("pad_8_mode_0"), val = tensor<string, []>("constant")];
            tensor<fp32, [1, 172, 309, 1]> pad_8 = pad(constant_val = const_17, mode = pad_8_mode_0, pad = pad_8_pad_0, x = StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice)[name = tensor<string, []>("pad_8")];
            tensor<fp32, []> const_18 = const()[name = tensor<string, []>("const_18"), val = tensor<fp32, []>(0x0p+0)];
            tensor<int32, [8]> pad_9_pad_0 = const()[name = tensor<string, []>("pad_9_pad_0"), val = tensor<int32, [8]>([0, 0, 0, 0, 0, 36, 0, 0])];
            tensor<string, []> pad_9_mode_0 = const()[name = tensor<string, []>("pad_9_mode_0"), val = tensor<string, []>("constant")];
            tensor<fp32, [1, 172, 309, 1]> pad_9 = pad(constant_val = const_18, mode = pad_9_mode_0, pad = pad_9_pad_0, x = StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_1)[name = tensor<string, []>("pad_9")];
            tensor<fp32, []> const_19 = const()[name = tensor<string, []>("const_19"), val = tensor<fp32, []>(0x0p+0)];
            tensor<int32, [8]> pad_10_pad_0 = const()[name = tensor<string, []>("pad_10_pad_0"), val = tensor<int32, [8]>([0, 0, 0, 0, 0, 57, 0, 0])];
            tensor<string, []> pad_10_mode_0 = const()[name = tensor<string, []>("pad_10_mode_0"), val = tensor<string, []>("constant")];
            tensor<fp32, [1, 172, 309, 1]> pad_10 = pad(constant_val = const_19, mode = pad_10_mode_0, pad = pad_10_pad_0, x = StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_2)[name = tensor<string, []>("pad_10")];
            tensor<fp32, []> const_20 = const()[name = tensor<string, []>("const_20"), val = tensor<fp32, []>(0x0p+0)];
            tensor<int32, [8]> pad_11_pad_0 = const()[name = tensor<string, []>("pad_11_pad_0"), val = tensor<int32, [8]>([0, 0, 0, 0, 0, 72, 0, 0])];
            tensor<string, []> pad_11_mode_0 = const()[name = tensor<string, []>("pad_11_mode_0"), val = tensor<string, []>("constant")];
            tensor<fp32, [1, 172, 309, 1]> pad_11 = pad(constant_val = const_20, mode = pad_11_mode_0, pad = pad_11_pad_0, x = StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_3)[name = tensor<string, []>("pad_11")];
            tensor<fp32, []> const_21 = const()[name = tensor<string, []>("const_21"), val = tensor<fp32, []>(0x0p+0)];
            tensor<int32, [8]> pad_12_pad_0 = const()[name = tensor<string, []>("pad_12_pad_0"), val = tensor<int32, [8]>([0, 0, 0, 0, 0, 84, 0, 0])];
            tensor<string, []> pad_12_mode_0 = const()[name = tensor<string, []>("pad_12_mode_0"), val = tensor<string, []>("constant")];
            tensor<fp32, [1, 172, 309, 1]> pad_12 = pad(constant_val = const_21, mode = pad_12_mode_0, pad = pad_12_pad_0, x = StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_4)[name = tensor<string, []>("pad_12")];
            tensor<fp32, []> const_22 = const()[name = tensor<string, []>("const_22"), val = tensor<fp32, []>(0x0p+0)];
            tensor<int32, [8]> pad_13_pad_0 = const()[name = tensor<string, []>("pad_13_pad_0"), val = tensor<int32, [8]>([0, 0, 0, 0, 0, 93, 0, 0])];
            tensor<string, []> pad_13_mode_0 = const()[name = tensor<string, []>("pad_13_mode_0"), val = tensor<string, []>("constant")];
            tensor<fp32, [1, 172, 309, 1]> pad_13 = pad(constant_val = const_22, mode = pad_13_mode_0, pad = pad_13_pad_0, x = StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_5)[name = tensor<string, []>("pad_13")];
            tensor<fp32, []> const_23 = const()[name = tensor<string, []>("const_23"), val = tensor<fp32, []>(0x0p+0)];
            tensor<int32, [8]> pad_14_pad_0 = const()[name = tensor<string, []>("pad_14_pad_0"), val = tensor<int32, [8]>([0, 0, 0, 0, 0, 101, 0, 0])];
            tensor<string, []> pad_14_mode_0 = const()[name = tensor<string, []>("pad_14_mode_0"), val = tensor<string, []>("constant")];
            tensor<fp32, [1, 172, 309, 1]> pad_14 = pad(constant_val = const_23, mode = pad_14_mode_0, pad = pad_14_pad_0, x = StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_6)[name = tensor<string, []>("pad_14")];
            tensor<bool, []> StatefulPartitionedCall_model_1_harmonic_stacking_concat_interleave_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_harmonic_stacking_concat_interleave_0"), val = tensor<bool, []>(false)];
            tensor<fp32, [1, 172, 309, 8]> StatefulPartitionedCall_model_1_harmonic_stacking_concat = concat(axis = StatefulPartitionedCall_model_1_harmonic_stacking_concat_axis, interleave = StatefulPartitionedCall_model_1_harmonic_stacking_concat_interleave_0, values = (pad_8, transpose_73, pad_9, pad_10, pad_11, pad_12, pad_13, pad_14))[name = tensor<string, []>("StatefulPartitionedCall_model_1_harmonic_stacking_concat")];
            tensor<int32, [4]> StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_7_begin_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_7_begin_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [4]> StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_7_end_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_7_end_0"), val = tensor<int32, [4]>([0, 0, 264, 0])];
            tensor<int32, [4]> StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_7_stride_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_7_stride_0"), val = tensor<int32, [4]>([1, 1, 1, 1])];
            tensor<bool, [4]> StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_7_begin_mask_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_7_begin_mask_0"), val = tensor<bool, [4]>([true, true, true, true])];
            tensor<bool, [4]> StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_7_end_mask_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_7_end_mask_0"), val = tensor<bool, [4]>([true, true, false, true])];
            tensor<bool, [4]> StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_7_squeeze_mask_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_7_squeeze_mask_0"), val = tensor<bool, [4]>([false, false, false, false])];
            tensor<fp32, [1, 172, 264, 8]> StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_7 = slice_by_index(begin = StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_7_begin_0, begin_mask = StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_7_begin_mask_0, end = StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_7_end_0, end_mask = StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_7_end_mask_0, squeeze_mask = StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_7_squeeze_mask_0, stride = StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_7_stride_0, x = StatefulPartitionedCall_model_1_harmonic_stacking_concat)[name = tensor<string, []>("StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_7")];
            tensor<int32, [4]> transpose_54_perm_0 = const()[name = tensor<string, []>("transpose_54_perm_0"), val = tensor<int32, [4]>([0, 3, 1, 2])];
            tensor<string, []> StatefulPartitionedCall_model_1_conv2d_1_Conv2Dx_pad_type_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_conv2d_1_Conv2Dx_pad_type_0"), val = tensor<string, []>("same")];
            tensor<int32, [2]> StatefulPartitionedCall_model_1_conv2d_1_Conv2Dx_strides_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_conv2d_1_Conv2Dx_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> StatefulPartitionedCall_model_1_conv2d_1_Conv2Dx_dilations_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_conv2d_1_Conv2Dx_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> StatefulPartitionedCall_model_1_conv2d_1_Conv2Dx_groups_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_conv2d_1_Conv2Dx_groups_0"), val = tensor<int32, []>(1)];
            tensor<int32, [4]> StatefulPartitionedCall_model_1_conv2d_1_Conv2Dx_pad_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_conv2d_1_Conv2Dx_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp32, [8, 8, 3, 39]> StatefulPartitionedCall_model_1_batch_normalization_2_FusedBatchNormV3_nchw_weight_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_batch_normalization_2_FusedBatchNormV3_nchw_weight_0"), val = tensor<fp32, [8, 8, 3, 39]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(78656)))];
            tensor<fp32, [8]> StatefulPartitionedCall_model_1_batch_normalization_2_FusedBatchNormV3_nchw_bias_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_batch_normalization_2_FusedBatchNormV3_nchw_bias_0"), val = tensor<fp32, [8]>([0x1.8bc15ep-1, -0x1.3b8942p+0, -0x1.43ca7ap+0, 0x1.f6081p-1, -0x1.f6c6dcp-2, 0x1.336728p+0, 0x1.5f41cep-1, -0x1.9b5e98p+0])];
            tensor<fp32, [1, 8, 172, 264]> transpose_72 = transpose(perm = transpose_54_perm_0, x = StatefulPartitionedCall_model_1_harmonic_stacking_strided_slice_7)[name = tensor<string, []>("transpose_72")];
            tensor<fp32, [1, 8, 172, 264]> StatefulPartitionedCall_model_1_batch_normalization_2_FusedBatchNormV3_nchw = conv(bias = StatefulPartitionedCall_model_1_batch_normalization_2_FusedBatchNormV3_nchw_bias_0, dilations = StatefulPartitionedCall_model_1_conv2d_1_Conv2Dx_dilations_0, groups = StatefulPartitionedCall_model_1_conv2d_1_Conv2Dx_groups_0, pad = StatefulPartitionedCall_model_1_conv2d_1_Conv2Dx_pad_0, pad_type = StatefulPartitionedCall_model_1_conv2d_1_Conv2Dx_pad_type_0, strides = StatefulPartitionedCall_model_1_conv2d_1_Conv2Dx_strides_0, weight = StatefulPartitionedCall_model_1_batch_normalization_2_FusedBatchNormV3_nchw_weight_0, x = transpose_72)[name = tensor<string, []>("StatefulPartitionedCall_model_1_batch_normalization_2_FusedBatchNormV3_nchw")];
            tensor<string, []> StatefulPartitionedCall_model_1_conv2d_4_Conv2Dx_pad_type_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_conv2d_4_Conv2Dx_pad_type_0"), val = tensor<string, []>("same")];
            tensor<int32, [2]> StatefulPartitionedCall_model_1_conv2d_4_Conv2Dx_strides_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_conv2d_4_Conv2Dx_strides_0"), val = tensor<int32, [2]>([1, 3])];
            tensor<int32, [2]> StatefulPartitionedCall_model_1_conv2d_4_Conv2Dx_dilations_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_conv2d_4_Conv2Dx_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> StatefulPartitionedCall_model_1_conv2d_4_Conv2Dx_groups_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_conv2d_4_Conv2Dx_groups_0"), val = tensor<int32, []>(1)];
            tensor<int32, [4]> StatefulPartitionedCall_model_1_conv2d_4_Conv2Dx_pad_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_conv2d_4_Conv2Dx_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp32, [32, 8, 5, 5]> StatefulPartitionedCall_model_1_batch_normalization_3_FusedBatchNormV3_nchw_weight_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_batch_normalization_3_FusedBatchNormV3_nchw_weight_0"), val = tensor<fp32, [32, 8, 5, 5]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(108672)))];
            tensor<fp32, [32]> StatefulPartitionedCall_model_1_batch_normalization_3_FusedBatchNormV3_nchw_bias_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_batch_normalization_3_FusedBatchNormV3_nchw_bias_0"), val = tensor<fp32, [32]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(134336)))];
            tensor<fp32, [1, 32, 172, 88]> StatefulPartitionedCall_model_1_batch_normalization_3_FusedBatchNormV3_nchw = conv(bias = StatefulPartitionedCall_model_1_batch_normalization_3_FusedBatchNormV3_nchw_bias_0, dilations = StatefulPartitionedCall_model_1_conv2d_4_Conv2Dx_dilations_0, groups = StatefulPartitionedCall_model_1_conv2d_4_Conv2Dx_groups_0, pad = StatefulPartitionedCall_model_1_conv2d_4_Conv2Dx_pad_0, pad_type = StatefulPartitionedCall_model_1_conv2d_4_Conv2Dx_pad_type_0, strides = StatefulPartitionedCall_model_1_conv2d_4_Conv2Dx_strides_0, weight = StatefulPartitionedCall_model_1_batch_normalization_3_FusedBatchNormV3_nchw_weight_0, x = transpose_72)[name = tensor<string, []>("StatefulPartitionedCall_model_1_batch_normalization_3_FusedBatchNormV3_nchw")];
            tensor<fp32, [1, 8, 172, 264]> StatefulPartitionedCall_model_1_re_lu_1_Relu = relu(x = StatefulPartitionedCall_model_1_batch_normalization_2_FusedBatchNormV3_nchw)[name = tensor<string, []>("StatefulPartitionedCall_model_1_re_lu_1_Relu")];
            tensor<fp32, [1, 32, 172, 88]> StatefulPartitionedCall_model_1_re_lu_3_Relu = relu(x = StatefulPartitionedCall_model_1_batch_normalization_3_FusedBatchNormV3_nchw)[name = tensor<string, []>("StatefulPartitionedCall_model_1_re_lu_3_Relu")];
            tensor<string, []> StatefulPartitionedCall_model_1_contours_reduced_Conv2Dx_pad_type_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_contours_reduced_Conv2Dx_pad_type_0"), val = tensor<string, []>("same")];
            tensor<int32, [2]> StatefulPartitionedCall_model_1_contours_reduced_Conv2Dx_strides_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_contours_reduced_Conv2Dx_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> StatefulPartitionedCall_model_1_contours_reduced_Conv2Dx_dilations_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_contours_reduced_Conv2Dx_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> StatefulPartitionedCall_model_1_contours_reduced_Conv2Dx_groups_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_contours_reduced_Conv2Dx_groups_0"), val = tensor<int32, []>(1)];
            tensor<int32, [4]> StatefulPartitionedCall_model_1_contours_reduced_Conv2Dx_pad_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_contours_reduced_Conv2Dx_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp32, [1, 8, 5, 5]> conv_0_weight_0 = const()[name = tensor<string, []>("conv_0_weight_0"), val = tensor<fp32, [1, 8, 5, 5]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(134528)))];
            tensor<fp32, [1]> conv_0_bias_0 = const()[name = tensor<string, []>("conv_0_bias_0"), val = tensor<fp32, [1]>([-0x1.940336p-2])];
            tensor<fp32, [1, 1, 172, 264]> conv_0 = conv(bias = conv_0_bias_0, dilations = StatefulPartitionedCall_model_1_contours_reduced_Conv2Dx_dilations_0, groups = StatefulPartitionedCall_model_1_contours_reduced_Conv2Dx_groups_0, pad = StatefulPartitionedCall_model_1_contours_reduced_Conv2Dx_pad_0, pad_type = StatefulPartitionedCall_model_1_contours_reduced_Conv2Dx_pad_type_0, strides = StatefulPartitionedCall_model_1_contours_reduced_Conv2Dx_strides_0, weight = conv_0_weight_0, x = StatefulPartitionedCall_model_1_re_lu_1_Relu)[name = tensor<string, []>("conv_0")];
            tensor<int32, [4]> StatefulPartitionedCall_model_1_contours_reduced_Conv2D_perm_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_contours_reduced_Conv2D_perm_0"), val = tensor<int32, [4]>([0, 2, 3, 1])];
            tensor<fp32, [1, 172, 264, 1]> transpose_71 = transpose(perm = StatefulPartitionedCall_model_1_contours_reduced_Conv2D_perm_0, x = conv_0)[name = tensor<string, []>("transpose_71")];
            tensor<fp32, [1, 172, 264, 1]> StatefulPartitionedCall_model_1_contours_reduced_Sigmoid = sigmoid(x = transpose_71)[name = tensor<string, []>("StatefulPartitionedCall_model_1_contours_reduced_Sigmoid")];
            tensor<int32, [3]> StatefulPartitionedCall_model_1_contour_reshape_1_Reshape_shape = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_contour_reshape_1_Reshape_shape"), val = tensor<int32, [3]>([1, 172, 264])];
            tensor<fp32, [1, 172, 264]> Identity = reshape(shape = StatefulPartitionedCall_model_1_contour_reshape_1_Reshape_shape, x = StatefulPartitionedCall_model_1_contours_reduced_Sigmoid)[name = tensor<string, []>("StatefulPartitionedCall_model_1_contour_reshape_1_Reshape")];
            tensor<int32, [1]> StatefulPartitionedCall_model_1_tf_expand_dims_2_ExpandDims_axes_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_tf_expand_dims_2_ExpandDims_axes_0"), val = tensor<int32, [1]>([-1])];
            tensor<fp32, [1, 172, 264, 1]> StatefulPartitionedCall_model_1_tf_expand_dims_2_ExpandDims = expand_dims(axes = StatefulPartitionedCall_model_1_tf_expand_dims_2_ExpandDims_axes_0, x = Identity)[name = tensor<string, []>("StatefulPartitionedCall_model_1_tf_expand_dims_2_ExpandDims")];
            tensor<fp32, [32, 1, 7, 7]> transpose_61 = const()[name = tensor<string, []>("transpose_61"), val = tensor<fp32, [32, 1, 7, 7]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(135424)))];
            tensor<int32, [4]> transpose_62_perm_0 = const()[name = tensor<string, []>("transpose_62_perm_0"), val = tensor<int32, [4]>([0, 3, 1, 2])];
            tensor<string, []> StatefulPartitionedCall_model_1_conv2d_2_Conv2Dx_pad_type_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_conv2d_2_Conv2Dx_pad_type_0"), val = tensor<string, []>("same")];
            tensor<int32, [2]> StatefulPartitionedCall_model_1_conv2d_2_Conv2Dx_strides_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_conv2d_2_Conv2Dx_strides_0"), val = tensor<int32, [2]>([1, 3])];
            tensor<int32, [2]> StatefulPartitionedCall_model_1_conv2d_2_Conv2Dx_dilations_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_conv2d_2_Conv2Dx_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> StatefulPartitionedCall_model_1_conv2d_2_Conv2Dx_groups_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_conv2d_2_Conv2Dx_groups_0"), val = tensor<int32, []>(1)];
            tensor<int32, [4]> StatefulPartitionedCall_model_1_conv2d_2_Conv2Dx_pad_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_conv2d_2_Conv2Dx_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp32, [32]> const_47 = const()[name = tensor<string, []>("const_47"), val = tensor<fp32, [32]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(141760)))];
            tensor<fp32, [1, 1, 172, 264]> transpose_70 = transpose(perm = transpose_62_perm_0, x = StatefulPartitionedCall_model_1_tf_expand_dims_2_ExpandDims)[name = tensor<string, []>("transpose_70")];
            tensor<fp32, [1, 32, 172, 88]> StatefulPartitionedCall_model_1_conv2d_2_BiasAdd = conv(bias = const_47, dilations = StatefulPartitionedCall_model_1_conv2d_2_Conv2Dx_dilations_0, groups = StatefulPartitionedCall_model_1_conv2d_2_Conv2Dx_groups_0, pad = StatefulPartitionedCall_model_1_conv2d_2_Conv2Dx_pad_0, pad_type = StatefulPartitionedCall_model_1_conv2d_2_Conv2Dx_pad_type_0, strides = StatefulPartitionedCall_model_1_conv2d_2_Conv2Dx_strides_0, weight = transpose_61, x = transpose_70)[name = tensor<string, []>("StatefulPartitionedCall_model_1_conv2d_2_BiasAdd")];
            tensor<fp32, [1, 32, 172, 88]> StatefulPartitionedCall_model_1_re_lu_2_Relu = relu(x = StatefulPartitionedCall_model_1_conv2d_2_BiasAdd)[name = tensor<string, []>("StatefulPartitionedCall_model_1_re_lu_2_Relu")];
            tensor<fp32, [1, 32, 7, 3]> transpose_63 = const()[name = tensor<string, []>("transpose_63"), val = tensor<fp32, [1, 32, 7, 3]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(141952)))];
            tensor<string, []> StatefulPartitionedCall_model_1_conv2d_3_Conv2Dx_pad_type_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_conv2d_3_Conv2Dx_pad_type_0"), val = tensor<string, []>("same")];
            tensor<int32, [2]> StatefulPartitionedCall_model_1_conv2d_3_Conv2Dx_strides_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_conv2d_3_Conv2Dx_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> StatefulPartitionedCall_model_1_conv2d_3_Conv2Dx_dilations_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_conv2d_3_Conv2Dx_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> StatefulPartitionedCall_model_1_conv2d_3_Conv2Dx_groups_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_conv2d_3_Conv2Dx_groups_0"), val = tensor<int32, []>(1)];
            tensor<int32, [4]> StatefulPartitionedCall_model_1_conv2d_3_Conv2Dx_pad_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_conv2d_3_Conv2Dx_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp32, [1]> const_48 = const()[name = tensor<string, []>("const_48"), val = tensor<fp32, [1]>([-0x1.3cce18p-1])];
            tensor<fp32, [1, 1, 172, 88]> StatefulPartitionedCall_model_1_conv2d_3_BiasAdd = conv(bias = const_48, dilations = StatefulPartitionedCall_model_1_conv2d_3_Conv2Dx_dilations_0, groups = StatefulPartitionedCall_model_1_conv2d_3_Conv2Dx_groups_0, pad = StatefulPartitionedCall_model_1_conv2d_3_Conv2Dx_pad_0, pad_type = StatefulPartitionedCall_model_1_conv2d_3_Conv2Dx_pad_type_0, strides = StatefulPartitionedCall_model_1_conv2d_3_Conv2Dx_strides_0, weight = transpose_63, x = StatefulPartitionedCall_model_1_re_lu_2_Relu)[name = tensor<string, []>("StatefulPartitionedCall_model_1_conv2d_3_BiasAdd")];
            tensor<fp32, [1, 1, 172, 88]> StatefulPartitionedCall_model_1_conv2d_3_Sigmoid = sigmoid(x = StatefulPartitionedCall_model_1_conv2d_3_BiasAdd)[name = tensor<string, []>("StatefulPartitionedCall_model_1_conv2d_3_Sigmoid")];
            tensor<bool, []> StatefulPartitionedCall_model_1_concat_concat_interleave_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_concat_concat_interleave_0"), val = tensor<bool, []>(false)];
            tensor<int32, []> const_43 = const()[name = tensor<string, []>("const_43"), val = tensor<int32, []>(1)];
            tensor<fp32, [1, 33, 172, 88]> StatefulPartitionedCall_model_1_concat_concat = concat(axis = const_43, interleave = StatefulPartitionedCall_model_1_concat_concat_interleave_0, values = (StatefulPartitionedCall_model_1_conv2d_3_Sigmoid, StatefulPartitionedCall_model_1_re_lu_3_Relu))[name = tensor<string, []>("StatefulPartitionedCall_model_1_concat_concat")];
            tensor<string, []> StatefulPartitionedCall_model_1_conv2d_5_Conv2Dx_pad_type_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_conv2d_5_Conv2Dx_pad_type_0"), val = tensor<string, []>("same")];
            tensor<int32, [2]> StatefulPartitionedCall_model_1_conv2d_5_Conv2Dx_strides_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_conv2d_5_Conv2Dx_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> StatefulPartitionedCall_model_1_conv2d_5_Conv2Dx_dilations_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_conv2d_5_Conv2Dx_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> StatefulPartitionedCall_model_1_conv2d_5_Conv2Dx_groups_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_conv2d_5_Conv2Dx_groups_0"), val = tensor<int32, []>(1)];
            tensor<int32, [4]> StatefulPartitionedCall_model_1_conv2d_5_Conv2Dx_pad_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_conv2d_5_Conv2Dx_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp32, [1, 33, 3, 3]> conv_1_weight_0 = const()[name = tensor<string, []>("conv_1_weight_0"), val = tensor<fp32, [1, 33, 3, 3]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(144704)))];
            tensor<fp32, [1]> conv_1_bias_0 = const()[name = tensor<string, []>("conv_1_bias_0"), val = tensor<fp32, [1]>([-0x1.70cac2p-2])];
            tensor<fp32, [1, 1, 172, 88]> conv_1 = conv(bias = conv_1_bias_0, dilations = StatefulPartitionedCall_model_1_conv2d_5_Conv2Dx_dilations_0, groups = StatefulPartitionedCall_model_1_conv2d_5_Conv2Dx_groups_0, pad = StatefulPartitionedCall_model_1_conv2d_5_Conv2Dx_pad_0, pad_type = StatefulPartitionedCall_model_1_conv2d_5_Conv2Dx_pad_type_0, strides = StatefulPartitionedCall_model_1_conv2d_5_Conv2Dx_strides_0, weight = conv_1_weight_0, x = StatefulPartitionedCall_model_1_concat_concat)[name = tensor<string, []>("conv_1")];
            tensor<int32, [4]> StatefulPartitionedCall_model_1_conv2d_5_Conv2D_perm_0 = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_conv2d_5_Conv2D_perm_0"), val = tensor<int32, [4]>([0, 2, 3, 1])];
            tensor<int32, [3]> StatefulPartitionedCall_model_1_note_reshape_3_Reshape_shape = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_note_reshape_3_Reshape_shape"), val = tensor<int32, [3]>([1, 172, 88])];
            tensor<int32, [4]> transpose_67_perm_0 = const()[name = tensor<string, []>("transpose_67_perm_0"), val = tensor<int32, [4]>([0, 2, 3, 1])];
            tensor<fp32, [1, 172, 88, 1]> transpose_68 = transpose(perm = transpose_67_perm_0, x = StatefulPartitionedCall_model_1_conv2d_3_Sigmoid)[name = tensor<string, []>("transpose_68")];
            tensor<fp32, [1, 172, 88]> Identity_1 = reshape(shape = StatefulPartitionedCall_model_1_note_reshape_3_Reshape_shape, x = transpose_68)[name = tensor<string, []>("StatefulPartitionedCall_model_1_note_reshape_3_Reshape")];
            tensor<fp32, [1, 172, 88, 1]> transpose_69 = transpose(perm = StatefulPartitionedCall_model_1_conv2d_5_Conv2D_perm_0, x = conv_1)[name = tensor<string, []>("transpose_69")];
            tensor<fp32, [1, 172, 88, 1]> StatefulPartitionedCall_model_1_conv2d_5_Sigmoid = sigmoid(x = transpose_69)[name = tensor<string, []>("StatefulPartitionedCall_model_1_conv2d_5_Sigmoid")];
            tensor<int32, [3]> StatefulPartitionedCall_model_1_onset_reshape_2_Reshape_shape = const()[name = tensor<string, []>("StatefulPartitionedCall_model_1_onset_reshape_2_Reshape_shape"), val = tensor<int32, [3]>([1, 172, 88])];
            tensor<fp32, [1, 172, 88]> Identity_2 = reshape(shape = StatefulPartitionedCall_model_1_onset_reshape_2_Reshape_shape, x = StatefulPartitionedCall_model_1_conv2d_5_Sigmoid)[name = tensor<string, []>("StatefulPartitionedCall_model_1_onset_reshape_2_Reshape")];
        } -> (Identity, Identity_1, Identity_2);
}